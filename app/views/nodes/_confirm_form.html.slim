#node-confirm-modal.modal.fade tabindex="-1" role="dialog"
  .modal-dialog.modal-xl role="document"
    .modal-content
      = bootstrap_form_for @confirmation, url: node_confirmation_path(@node) do |f|
        .modal-header
          h5.modal-title 確認事項
          button.btn-close type="button" data-bs-dismiss="modal" aria-label=t('do_actions.close')
        .modal-body
          - question_count = 1
          p
            = t(:node_confirmation, scope: :messages)
          - [:existence].each do |attr_name|
            = f.form_group attr_name, \
              label: { \
                text: tag.strong(t(:question_with_number, scope: :messages, count: question_count)) + \
                tag.span(' ' + t(attr_name, scope: [:messages, :node_confirm_questions])) \
              }, \
              help: t(attr_name, scope: [:messages, :node_confirm_helps], default: nil) do
              - t_enums(attr_name.to_s.pluralize.intern,
                        Confirmation).each do |message, value|
                = f.radio_button attr_name, value, label: message, required: true
            - question_count += 1
          #node-confirm-collapse.collapse
            - [:content].each do |attr_name|
              = f.form_group attr_name, \
                label: { \
                  text: tag.strong(t(:question_with_number, scope: :messages, count: question_count)) + \
                  tag.span(' ' + t(attr_name, scope: [:messages, :node_confirm_questions])) \
                }, \
                help: raw(t(attr_name, scope: [:messages, :node_confirm_helps], default: nil)) do
                - t_enums(attr_name.to_s.pluralize.intern,
                          Confirmation).each do |message, value|
                  = f.radio_button attr_name, value, label: message
              - question_count += 1

            - if @node.physical?
              - [:os_update, :app_update].each do |attr_name|
                = f.form_group attr_name, \
                  label: { \
                    text: tag.strong(t(:question_with_number, scope: :messages, count: question_count)) + \
                    tag.span(' ' + t(attr_name, scope: [:messages, :node_confirm_questions])) \
                  }, \
                  help: raw(t(attr_name, scope: [:messages, :node_confirm_helps], default: nil)) do
                  - t_enums(attr_name.to_s.pluralize.intern, Confirmation).each do |message, value|
                    - next if value == 'unnecessary'
                    = f.radio_button attr_name, value, label: message
                - question_count += 1


              - if @confirmation.security_software
                - attr_name = :security_software
                = f.form_group attr_name, \
                  label: { \
                    text: tag.strong(t(:question_with_number, scope: :messages, count: question_count)) + \
                    tag.span(' ' + t(attr_name, scope: [:messages, :node_confirm_questions])) \
                  }, \
                  help: raw(t(attr_name, scope: [:messages, :node_confirm_helps], default: nil)) do
                  .row
                    = f.fields_for :security_software, @confirmation.security_software do |security_software_f|
                      = security_software_f.hidden_field :os_category_id

                      = security_software_f.select :installation_method,
                        t_enums(:installation_methods, SecuritySoftware).select \
                          { |k, v| @installation_methods.include?(v) },
                        { include_blank: '(未選択)', wrapper_class: 'col-md-4' }

                      = security_software_f.text_field :name, list: 'confirmation_security_software_name-list',
                        wrapper_class: 'col-md-8', disabled: true
                      = datalist_canadidation :security_software, :name, security_softwares_path,
                        parents: [:confirmation],
                        order: {confirmations_count: 'desc'},
                        inputList: [:os_category_id, :installation_method],
                        requiredInput: :installation_method,
                        description: true,
                        clear: true,
                        locked: {name: :installation_method,
                          list: SecuritySoftware.conf_installation_methods.select { |k, v| v[:locked] }.keys},
                        required: {name: :installation_method,
                          list: SecuritySoftware.conf_installation_methods.select { |k, v| v[:required] }.keys}

                  small#confirmation_security_software_name-description.form-text.text-muted
                - question_count += 1
                - %i[security_update security_scan].each do |attr_name|
                  = f.form_group attr_name, \
                    label: { \
                      text: tag.strong(t(:question_with_number, scope: :messages, count: question_count)) + \
                      tag.span(' ' + t(attr_name, scope: [:messages, :node_confirm_questions])) \
                    }, \
                    help: raw(t(attr_name, scope: [:messages, :node_confirm_helps], default: nil)) do
                    - t_enums(attr_name.to_s.pluralize.intern,
                              Confirmation).each do |message, value|
                      = f.radio_button attr_name, value, label: message
                  - question_count += 1
              - else
                p.text-danger
                  | OS情報が登録されていないため、
                  | セキュリティソフトウェアに関する確認ができません。
                  | OS情報を登録後に再度確認作業を実施してください。
          p#high-tech.text-danger.d-none
            | 【高度な技術的判断】の付く項目が選択されました。
            | この項目の判断には、高度な技術的知識が必要とされます。
            | 専門家による判断に基づく場合のみ、「確認終了」を押してください。
        .modal-footer
          button.btn.btn-dark type="button" data-bs-dismiss="modal"
            | キャンセルして
            = t(:close, scope: [:do_actions])
          = f.submit '確認終了', class: 'btn btn-primary'
