#node-confirm-modal.modal.fade tabindex="-1" role="dialog"
  .modal-dialog.modal-xl role="document"
    .modal-content
      = bootstrap_form_with model: @confirmation, url: node_confirmation_path(@node), data: {turbo: false} do |f|
        .modal-header
          h5.modal-title 確認事項
          button.btn-close type="button" data-bs-dismiss="modal" aria-label=t("do_actions.close")
        .modal-body
          - question_count = 1
          p
            = t("messages.node_confirmation")
          - [:existence].each do |attr_name|
            = f.form_group attr_name,
              label: {text: safe_join([tag.strong(t("messages.question_with_number", count: question_count)),
                                       " ", t(attr_name, scope: "messages.node_confirm_questions"),])},
              help: t(attr_name, scope: "messages.node_confirm_helps", default: nil) do
              - t_enums(attr_name.to_s.pluralize.intern, Confirmation).each do |key, message|
                = f.radio_button attr_name, key, label: message, required: true
            - question_count += 1
          #node-confirm-collapse.collapse
            - [:content].each do |attr_name|
              = f.form_group attr_name, \
                label: {text: safe_join([tag.strong(t("messages.question_with_number", count: question_count)),
                                         " ", t(attr_name, scope: "messages.node_confirm_questions"),])},
                help: raw(t(attr_name, scope: "messages.node_confirm_helps", default: nil)) do
                - t_enums(attr_name.to_s.pluralize.intern, Confirmation).each do |key, message|
                  = f.radio_button attr_name, key, label: message, required: false
              - question_count += 1

            - if @node.physical?
              - [:os_update, :app_update].each do |attr_name|
                = f.form_group attr_name, \
                  label: {text: safe_join([tag.strong(t("messages.question_with_number", count: question_count)),
                                           " ", t(attr_name, scope: "messages.node_confirm_questions"),])},
                  help: raw(t(attr_name, scope: "messages.node_confirm_helps", default: nil)) do
                  - t_enums(attr_name.to_s.pluralize.intern, Confirmation).each do |key, message|
                    - next if key == "unnecessary"
                    = f.radio_button attr_name, key, label: message, required: false
                .collapse id="node-confirm-secured-#{attr_name}"
                  .card
                    .card-body.text-danger
                      | 【高度な技術的判断】が必要な項目が選択されています。
                      | この項目は、
                      strong
                        | セキュリティに関する知識を有する技術者が脆弱性が存在しないと総合的に判断した
                      | 場合のみ選択できます。
                      | 例えば、次のような場合の組み合わせです。
                      ul
                        li 最新ではないが、既知の脆弱性が無いバージョンを使用している。
                        li 既知の脆弱性がある機能を無効化している。
                        li 設定等により、既知の脆弱性を回避している。
                        li 他の機器やソフトウェアによる保護機能等により、既知の脆弱性の影響を受けないようにしている。
                        li その他の理由で、脆弱性が無いと判断できる。
                - question_count += 1
              - [:software].each do |attr_name|
                = f.form_group attr_name, \
                  label: {text: safe_join([tag.strong(t("messages.question_with_number", count: question_count)),
                                          " ", t(attr_name, scope: "messages.node_confirm_questions"),])},
                  help: raw(t(attr_name, scope: "messages.node_confirm_helps", default: nil)) do
                  - t_enums(attr_name.to_s.pluralize.intern, Confirmation).each do |key, message|
                    = f.radio_button attr_name, key, label: message, required: false
                - question_count += 1

              - [:security_hardware].each do |attr_name|
                - pluralized_attr_name = attr_name.to_s.pluralize.intern
                - list = t_bitwises(attr_name.to_s.pluralize.intern, Confirmation).to_a
                = f.collection_check_boxes pluralized_attr_name, list, :first, :second,
                  label: {text: safe_join([tag.strong(t("messages.question_with_number", count: question_count)),
                                        " ", t(attr_name, scope: "messages.node_confirm_questions"),])},
                  help: raw(t(attr_name, scope: "messages.node_confirm_helps", default: nil))
                - question_count += 1
              - if @confirmation.security_software
                - [:security_software].each do |attr_name|
                  = f.form_group attr_name, \
                    label: {text: safe_join([tag.strong(t("messages.question_with_number", count: question_count)),
                                            " ", t(attr_name, scope: "messages.node_confirm_questions"),])},
                    help: raw(t(attr_name, scope: "messages.node_confirm_helps", default: nil)) do
                    .row
                      = f.fields_for :security_software, @confirmation.security_software do |security_software_f|
                        = security_software_f.hidden_field :os_category_id

                        = security_software_f.collection_select :installation_method,
                          t_enums(:installation_methods, SecuritySoftware).select \
                            { |k, _| @installation_methods.include?(k) },
                          :first, :second,
                          {include_blank: "(未選択)", wrapper_class: "col-md-4"}

                        = security_software_f.text_field :name, list: "confirmation_security_software_name-list",
                          wrapper_class: "col-md-8", disabled: true

                        = datalist_canadidation :security_software, :name, security_softwares_path,
                          parents: [:confirmation],
                          order: {confirmations_count: "desc"},
                          inputList: [:os_category_id, :installation_method],
                          requiredInput: :installation_method,
                          description: true,
                          clear: true,
                          locked: { \
                            name: :installation_method,
                            list: SecuritySoftware.conf_installation_methods.select { |_, v| v[:locked] }.keys,
                          },
                          required: { \
                            name: :installation_method,
                            list: SecuritySoftware.conf_installation_methods.select { |_, v| v[:required] }.keys,
                          }

                    small#confirmation_security_software_name-description.form-text.text-muted
                  - question_count += 1
                - [:security_update, :security_scan].each do |attr_name|
                  = f.form_group attr_name, \
                    label: {text: safe_join([tag.strong(t("messages.question_with_number", count: question_count)),
                                             " ", t(attr_name, scope: "messages.node_confirm_questions"),])},
                    help: raw(t(attr_name, scope: "messages.node_confirm_helps", default: nil)) do
                    - t_enums(attr_name.to_s.pluralize.intern, Confirmation).each do |key, message|
                      = f.radio_button attr_name, key, label: message, required: false
                  - question_count += 1
              - else
                p.text-danger
                  | OS情報が登録されていないため、
                  | セキュリティソフトウェアに関する確認ができません。
                  | OS情報を登録後に再度確認作業を実施してください。
        .modal-footer
          button.btn.btn-dark type="button" data-bs-dismiss="modal"
            | キャンセルして
            = t("do_actions.close")
          = f.submit "確認終了", class: "btn btn-primary"
