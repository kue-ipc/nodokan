= turbo_frame_tag node, autoscroll: true,
  data: {autoscroll_block: "start", turbo_action: :advance} do
  dl
    = dt_dd_for node, :name do |_name|
      = node_name_decorated(node)
    = dt_dd_for node, :fqdn
    - case node.node_type
    - when "normal"
      = dt_dd_for node, :place, no_link: true,
        blank_alt: t("messages.node_unregistered_place"),
        blank_class: "text-warning-emphasis"
    - when "virtual"
      = dt_dd_for node, :host,
        blank_alt: t("messages.node_unregistered_host"),
        blank_class: "text-warning-emphasis"
    - when "logical"
      = dt_dd_for node, :components do |components|
        - components.each do |component|
          - if current_user.admin? || component.user.id == current_user.id
            = span_value_for(component)
          - else
            = component.name
          br
    - unless node.logical?
      = dt_dd_for node, :hardware do |hardware|
        - if hardware&.name.present?
          - if hardware.device_type
            == hardware.device_type.icon.presence
          - else
            i.fas.fa-question-circle
          =< hardware.name
        - else
          .text-warning-emphasis
            = t("messages.node_unregistered_hardware")
      = dt_dd_for node, :operating_system do |operating_system|
        - if operating_system&.os_category
          == operating_system.os_category.icon.presence
          =< operating_system.name
        - else
          .text-danger-emphasis
            = t("messages.node_unregistered_operating_system")
    = dt_dd_for node, :nics do |nics|
      - if nics.count.zero?
        .text-muted = t("messages.node_no_nics")
      - else
        table.table.table-sm.mb-0
          thead
            tr
              th scope="col" = Nic.human_attribute_name(:number)
              th scope="col" = Nic.human_attribute_name(:interface_type)
              th scope="col"
                = Nic.human_attribute_name(:name)
                | /
                = Nic.human_attribute_name(:flags)
              th scope="col" = Nic.human_attribute_name(:mac_address)
              th scope="col" = Nic.human_attribute_name(:network)
              th scope="col" = Nic.human_attribute_name(:ipv4)
              th scope="col" = Nic.human_attribute_name(:ipv6)
          tbody
            - nics.each do |nic|
              tr
                td scope="row"
                  - if current_user.admin?
                    = link_to nic.number, nic_path(nic), data: {turbo: false}
                  - else
                    = nic.number
                td
                  = t_enum(nic.interface_type, :interface_type)
                td
                  = nic.name
                  - [:locked, :auth, :global].each do |attr|
                    = badge_for(nic, attr)
                td = nic.mac_address
                td
                  = span_value_for(nic.network)
                td
                  = badge_for(nic, :ipv4_config, disbaled_show: true,
                    class: "me-1")
                  = span_value_for(nic.ipv4, hide_blank: true)
                td
                  = badge_for(nic, :ipv6_config, disabled_show: true,
                    class: "me-1")
                  = span_value_for(nic.ipv6, hide_blank: true)
    = dt_dd_for node, :duid
    - if Settings.feature.confirmation
      = dt_dd_for node, :confirmation do |confirmation|
        - case confirmation&.status
        - when nil, :unconfirmed
          i.fas.fa-times-circle.text-danger-emphasis
          =< t("messages.unconfirmed")
          .text-danger-emphasis = t("messages.node_confirmation_unconfirmed")

        - when :expired
          i.fas.fa-times-circle.text-danger-emphasis
          =<> l(confirmation.confirmed_at.to_date, format: :long)
          = t("messages.node_confirmation_expired_date",
            date: l(confirmation.expiration.to_date, format: :long))
          - if confirmation.approved
            =< t("messages.approved")
          - else
            =< t("messages.unapproved")
          .text-danger-emphasis = t("messages.node_confirmation_expired")

        - when :unapproved
          i.fas.fa-exclamation-triangle.text-warning-emphasis
          =<> l(confirmation.confirmed_at.to_date, format: :long)
          = t("messages.node_confirmation_expiration_date",
            date: l(confirmation.expiration.to_date, format: :long))
          =< t("messages.unapproved")

        - when :expire_soon
          i.fas.fa-exclamation-triangle.text-warning-emphasis
          =<> l(confirmation.confirmed_at.to_date, format: :long)
          = t("messages.node_confirmation_expiration_date",
            date: l(confirmation.expiration.to_date, format: :long))
          =< t("messages.expire_soon")
          .text-warning-emphasis = t("messages.node_confirmation_expiring_soon")

        - when :approved
          i.fas.fa-check.text-success-emphasis
          =<> l(confirmation.confirmed_at.to_date, format: :long)
          = t("messages.node_confirmation_expiration_date",
            date: l(confirmation.expiration.to_date, format: :long))
          =< t("messages.approved")

        - if confirmation&.confirmed_at.present? && !confirmation.approved
          - case confirmation.existence
          - when "existing"
            .text-warning-emphasis = t("messages.node_confirmation_unapproved")
            - if confirmation.content_problem?
              .text-danger-emphasis = t("messages.node_content_problem")
            - unless node.logical?
              - if node.operating_system.nil?
                .text-danger-emphasis = t("messages.node_no_operating_system")
              - if confirmation.unknown?
                .text-danger-emphasis = t("messages.node_confirmation_unknown")
              - if confirmation.os_update_problem?
                - if confirmation.os_update_eol?
                  .text-danger-emphasis = t("messages.node_os_eol")
                - else
                  .text-danger-emphasis = t("messages.node_os_update_problem")
              - if confirmation.app_update_problem?
                - if confirmation.app_update_eol?
                  .text-danger-emphasis = t("messages.node_app_eol")
                - else
                  .text-danger-emphasis = t("messages.node_app_update_problem")
              - if confirmation.software_problem?
                .text-danger-emphasis = t("messages.node_software_problem")
              - if confirmation.security_hardware_problem?
                .text-danger-emphasis = t("messages.node_security_hardware_problem")
              - if node.operating_system
                - if confirmation.security_software_unknown?
                  .text-danger-emphasis = t("messages.node_security_software_unknown")
                - else
                  - if confirmation.security_software_problem?
                    .text-danger-emphasis = t("messages.node_security_software_problem")
                  - if confirmation.security_update_problem?
                    - if confirmation.security_update_eol?
                      .text-danger-emphasis = t("messages.node_security_eol")
                    - else
                      .text-danger-emphasis = t("messages.node_security_update_problem")
                  - if confirmation.security_scan_problem?
                    .text-danger-emphasis = t("messages.node_security_scan_problem")
          - when "abandoned"
            .text-danger-emphasis = t("messages.node_abandoned")
          - when "unnecessary"
            .text-danger-emphasis = t("messages.node_unnecessary")
          - when "missing"
            .text-danger-emphasis = t("messages.node_missing")
          - when "not_my_own"
            .text-danger-emphasis = t("messages.node_not_my_own")
          - when "unknown"
            .text-danger-emphasis = t("messages.node_unknown")

    = dt_dd_for node, :note, line_break: true
    - if current_user.admin?
      = dt_dd_for node, :user
    = dt_dd_for node, :connected_at, blank_alt: "-"

  p
    - if Settings.feature.confirmation
      - if node.confirmation
        =< link_to t("actions.confirm"), edit_node_confirmation_path(node),
          class: "btn btn-primary", data: {turbo_frame: "modal"}
      - else
        =< link_to t("actions.confirm"), new_node_confirmation_path(node),
          class: "btn btn-primary", data: {turbo_frame: "modal"}
    =< link_to t("actions.edit"), edit_node_path(node), class: "btn btn-warning"

  p.text-muted
    small
      | 最終接続日時は、端末がネットワークに接続されたことをシステムが検知した最後の日時です。
      | 接続してから表示までには数十分のタイムラグがあります。
      | 一部のネットワークは検知に対応してません。
      | 端末の実在確認の参考にしてください。

  - if !Settings.feature.confirmation || node.confirmation&.destroyable?
    hr
    h3 端末の削除
    - if node.specific
      p
        strong 特定端末を直接は削除することできません。
        | 廃棄済み等の理由で端末を削除したい場合は、下記の特定端末の申請から「削除」を申請してください。
    - else
      p
        |
          端末が存在しない、または、不明の場合は削除してください。
          削除した端末はネットワークに接続できません。
      =<> button_to t("actions.destroy"), node,
        data: {turbo_confirm: t("messages.confirm_destroy_name",
          name: node.name)},
        method: :delete,
        class: "btn btn-danger"

  - if !current_user.guest? && \
      (!Settings.feature.confirmation || node.confirmation&.transferable?)
    hr
    h3 管理の譲渡
    p
      |
        端末の所有者(管理者)ではない場合は、本来の所有者に管理を譲渡してください。
        譲渡先ユーザーのユーザー名を入力してください。

    = bootstrap_form_with url: transfer_node_path(node),
      data: {turbo: false} do |f|
      = f.text_field :username, label: "ユーザー名", floating: true
      = f.text_area :note, floating: true,
        label: "備考 (端末の備考に追加します)",
        value: "[#{current_user.username}から管理譲渡]"
      = f.submit "譲渡", class: "btn btn-primary ms-1"

  - if node.nics.count.positive?
    hr

    p = t("messages.node_nic_setting")

    - node.nics.each do |nic|
      h3
        = nic.number
        | 番目のネットワーク [
        = t_enum(nic.interface_type, :interface_type)
        | ]
        - if nic.name.present?
          | (
          = nic.name
          | )
      - if nic.nat?
        p
          |
            NATはファイアウォールで設定されるため、端末に設定する必要はありません。
      - else
        .row
          .col-md-6
            h4 IPv4
            - case nic.ipv4_config
            - when "dynamic", "reserved"
              - ip_data = { \
                setting: t_enum("auto", :ip_setting),
                address: "-",
                netmask: "-",
                gateway: "-",
                dns_servers: t_enum("auto", :ip_setting),
              }
            - when "static", "manual"
              - ip_data = { \
                setting: t_enum("manual", :ip_setting),
                address: nic.ipv4_address.presence || sp,
                netmask: nic.network&.ipv4_netmask.presence || sp,
                gateway: nic.network&.ipv4_gateway.presence || sp,
                dns_servers: nic.network&.ipv4_dns_servers || \
                  Network.ipv4_global&.ipv4_dns_servers || sp,
              }
            - when "disabled"
              - ip_data = { \
                setting: t_enum("disabled", :ip_setting),
                address: "-",
                netmask: "-",
                gateway: "-",
                dns_servers: "-",
              }

            dl.row.line
              dt.col-sm-6 = Nic.human_attribute_name(:ip_setting)
              dd.col-sm-6 = ip_data[:setting]
              dt.col-sm-6 = Nic.human_attribute_name(:ip_address)
              dd.col-sm-6 = ip_data[:address]
              dt.col-sm-6 = Network.human_attribute_name(:netmask)
              dd.col-sm-6 = ip_data[:netmask]
              dt.col-sm-6 = Network.human_attribute_name(:gateway)
              dd.col-sm-6 = ip_data[:gateway]
              dt.col-sm-6 = Network.human_attribute_name(:dns_servers)
              dd.col-sm-6 = ip_data[:dns_servers]
          .col-md-6
            h4 IPv6
            - case nic.ipv6_config
            - when "dynamic", "reserved"
              - ip_data = { \
                setting: t_enum("auto", :ip_setting),
                address: "-",
                prefix_length: "-",
                gateway: "-",
                dns_servers: t_enum("auto", :ip_setting),
              }
            - when "static", "manual", "mapped"
              - ip_data = { \
                setting: t_enum("manual", :ip_setting),
                address: nic.ipv6_address.presence || sp,
                prefix_length: nic.network&.ipv6_prefix_length.presence || sp,
                gateway: nic.network&.ipv6_gateway.presence || sp,
                dns_servers: nic.network&.ipv6_dns_servers || \
                  Network.ipv4_global&.ipv6_dns_servers || sp,
              }
            - when "disabled"
              - ip_data = { \
                setting: t_enum("disabled", :ip_setting),
                address: "-",
                prefix_length: "-",
                gateway: "-",
                dns_servers: "-",
              }

            dl.row.line
              dt.col-sm-6 = Nic.human_attribute_name(:ip_setting)
              dd.col-sm-6 = ip_data[:setting]
              dt.col-sm-6 = Nic.human_attribute_name(:ip_address)
              dd.col-sm-6 = ip_data[:address]
              dt.col-sm-6 = Network.human_attribute_name(:prefix_length)
              dd.col-sm-6 = ip_data[:prefix_length]
              dt.col-sm-6 = Network.human_attribute_name(:gateway)
              dd.col-sm-6 = ip_data[:gateway]
              dt.col-sm-6 = Network.human_attribute_name(:dns_servers)
              dd.col-sm-6 = ip_data[:dns_servers]

    - if Settings.additional_messages.nic_setting
      p = Settings.additional_messages.nic_setting

  - if Settings.feature.specific_node
    hr
    h3 特定端末の申請

    p DNS登録、外部公開、外部との直接通信が必要な場合は、特定端末の申請を行う必要があります。

    - if node.specific
      p
        | この端末は特定端末です。「変更」や「解除」が必要な場合は、申請画面から申請を行ってください。
      = link_to "特定端末申請画面へ",
        new_node_specific_node_application_path(node),
        class: "btn btn-secondary", data: {turbo: false}
    - elsif Settings.feature.confirmation && node.confirmation&.status != :approved
      p
        | この端末は「確認」が「承認済み」ではないため、特定端末として申請することはできません。
        | 「確認」を実施し、端末の問題をすべて解決済みにしてください。
    - elsif node.nics.all? { |nic| nic.ipv4_data.nil? && nic.ipv6_data.nil? }
      p
        | この端末には固有のIPアドレスが割り当てられていないため、特定端末として申請することはできません。
        | ネットワークの設定で予約または固定を選択し、IPアドレスを割り当ててください。
    - else
      = link_to "特定端末申請画面へ",
        new_node_specific_node_application_path(node),
        class: "btn btn-secondary", data: {turbo: false}
