= turbo_frame_tag node, autoscroll: true, data: {autoscroll_block: "start"}
  dl
    = dt_dd_for node, :name do |name|
      = name
      - [:logical, :virtual_machine, :specific, :global, :public, :dns].each do |attr|
        - if node.__send__(attr)
          = badge_for(attr, scope: "activerecord.attributes.node",
            badge_class: "ms-1")
    = dt_dd_for node, :fqdn
    - unless node.logical?
      = dt_dd_for node, :place do |place|
        - if place&.name.present?
          = place.name
        - else
          .text-warning = t("messages.node_unregistered_place")
      = dt_dd_for node, :hardware do |hardware|
        - if hardware&.name.present?
          - if hardware.device_type
            == hardware.device_type.icon.presence
          - else
            i.fas.fa-question-circle
          =< hardware.name
        - else
          .text-warning = t("messages.node_unregistered_hardware")
      = dt_dd_for node, :operating_system do |operating_system|
        - if operating_system&.os_category
          == operating_system.os_category.icon.presence
          =< operating_system.name
        - else
          .text-danger = t("messages.node_unregistered_operating_system")
    = dt_dd_for node, :nics do |nics|
      - if nics.count.zero?
        .text-muted = t("messages.node_no_nics")
      - else
        table.table.table-sm.mb-0
          thead
            tr
              th scope="col" = Nic.human_attribute_name(:number)
              th scope="col" = Nic.human_attribute_name(:interface_type)
              th scope="col"
                = Nic.human_attribute_name(:name)
                | /
                = Nic.human_attribute_name(:flags)
              th scope="col" = Nic.human_attribute_name(:mac_address)
              th scope="col" = Nic.human_attribute_name(:network)
              th scope="col" = Nic.human_attribute_name(:ipv4)
              - if Settings.config.ipv6
                th scope="col" = Nic.human_attribute_name(:ipv6)
          tbody
            - nics.each do |nic|
              tr
                td scope="row"
                  - if current_user.admin?
                    = link_to nic.number, nic_path(nic)
                  - else
                    = nic.number
                td
                  = t(nic.interface_type,
                    scope: "activerecord.enums.interface_types")
                td
                  = nic.name
                  - [:locked, :auth, :global].each do |attr|
                    - if nic.__send__(attr)
                      = badge_for(attr, scope: "activerecord.attributes.nic",
                        badge_class: "ms-1")
                td = nic.mac_address
                td
                  - if nic.network
                    = link_to nic.network.name, nic.network
                td
                  = badge_for(nic.ipv4_config,
                    scope: "activerecord.enums.ipv4_configs")
                  =< span_value_for(nic.ipv4, hide_blank: true)
                - if Settings.config.ipv6
                  td
                    = badge_for(nic.ipv6_config,
                      scope: "activerecord.enums.ipv6_configs")
                    =< span_value_for(nic.ipv6, hide_blank: true)
    = dt_dd_for node, :duid
    = dt_dd_for node, :confirmation do |confirmation|
      - case confirmation&.status
      - when nil, :unconfirmed
        i.fas.fa-times-circle.text-danger
        =< t("messages.unconfirmed")
        .text-danger = t("messages.node_confirmation_unconfirmed")

      - when :expired
        i.fas.fa-times-circle.text-danger
        =<> l(confirmation.confirmed_at.to_date, format: :long)
        = t("messages.node_confirmation_expired_date",
          date: l(confirmation.expiration.to_date, format: :long))
        - if confirmation.approved
          =< t("messages.approved")
        - else
          =< t("messages.unapproved")
        .text-danger = t("messages.node_confirmation_expired")

      - when :unapproved
        i.fas.fa-exclamation-triangle.text-warning
        =<> l(confirmation.confirmed_at.to_date, format: :long)
        = t("messages.node_confirmation_expiration_date",
          date: l(confirmation.expiration.to_date, format: :long))
        =< t("messages.unapproved")

      - when :expire_soon
        i.fas.fa-exclamation-triangle.text-warning
        =<> l(confirmation.confirmed_at.to_date, format: :long)
        = t("messages.node_confirmation_expiration_date",
          date: l(confirmation.expiration.to_date, format: :long))
        =< t("messages.expire_soon")
        .text-warning = t("messages.node_confirmation_expiring_soon")

      - when :approved
        i.fas.fa-check.text-success
        =<> l(confirmation.confirmed_at.to_date, format: :long)
        = t("messages.node_confirmation_expiration_date",
          date: l(confirmation.expiration.to_date, format: :long))
        =< t("messages.approved")

      - if confirmation&.confirmed_at.present? && !confirmation.approved
        - case confirmation.existence
        - when "existing"
          .text-warning = t("messages.node_confirmation_unapproved")
          - if confirmation.content_problem?
            .text-danger = t("messages.node_content_problem")
          - unless node.logical?
            - if node.operating_system.nil?
              .text-danger = t("messages.node_no_operating_system")
            - if confirmation.unknown?
              .text-danger = t("messages.node_confirmation_unknown")
            - if confirmation.os_update_problem?
              - if confirmation.os_update_eol?
                .text-danger = t("messages.node_os_eol")
              - else
                .text-danger = t("messages.node_os_update_problem")
            - if confirmation.app_update_problem?
              - if confirmation.app_update_eol?
                .text-danger = t("messages.node_app_eol")
              - else
                .text-danger = t("messages.node_app_update_problem")
            - if confirmation.software_problem?
              .text-danger = t("messages.node_software_problem")
            - if confirmation.security_hardware_problem?
              .text-danger = t("messages.node_security_hardware_problem")
            - if node.operating_system
              - if confirmation.security_software_unknown?
                .text-danger = t("messages.node_security_software_unknown")
              - else
                - if confirmation.security_software_problem?
                  .text-danger = t("messages.node_security_software_problem")
                - if confirmation.security_update_problem?
                  - if confirmation.security_update_eol?
                    .text-danger = t("messages.node_security_eol")
                  - else
                    .text-danger = t("messages.node_security_update_problem")
                - if confirmation.security_scan_problem?
                  .text-danger = t("messages.node_security_scan_problem")
        - when "abandoned"
          .text-danger = t("messages.node_abandoned")
        - when "unnecessary"
          .text-danger = t("messages.node_unnecessary")
        - when "missing"
          .text-danger = t("messages.node_missing")
        - when "not_my_own"
          .text-danger = t("messages.node_not_my_own")
        - when "unknown"
          .text-danger = t("messages.node_unknown")

    = dt_dd_for node, :note, line_break: true
    - if current_user.admin?
      = dt_dd_for node, :user
    = dt_dd_for node, :connected_at, blank_alt: "-"

  p
    button#node-confirm-modal-toggle.btn.btn-primary[
      type="button" data-bs-toggle="modal" data-bs-target="#node-confirm-modal"]
      = t("actions.confirm")
    =<> link_to t("actions.edit"), edit_node_path(node),
      class: "btn btn-warning"

  p.text-muted
    small
      | 最終接続日時は、端末がネットワークに接続されたことをシステムが検知した最後の日時です。
      | 接続してから表示までには数十分のタイムラグがあります。
      | 一部のネットワークは検知に対応してません。
      | 端末の実在確認の参考にしてください。

  - if node.confirmation&.destroyable?
    hr
    h3 端末の削除
    - if node.specific
      p
        strong 特定端末を直接は削除することできません。
        | 廃棄済み等の理由で端末を削除したい場合は、下記の特定端末の申請から「削除」を申請してください。
    - else
      p
        |
          端末が存在しない、または、不明の場合は削除してください。
          削除した端末はネットワークに接続できません。
      =<> button_to t("actions.destroy"), node,
        data: {turbo_confirm: t("messages.corfirm_destroy_name",
          name: node.name)},
        method: :delete,
        class: "btn btn-danger"

  - if node.confirmation&.transferable?
    hr
    h3 管理の譲渡
    p
      |
        端末の所有者(管理者)ではない場合は、本来の所有者に管理を譲渡してください。
        譲渡先ユーザーのユーザー名を入力してください。

    = bootstrap_form_with url: transfer_node_path(node),
      data: {turbo: false} do |f|
      = f.text_field :username, label: "ユーザー名", label_class: "me-1"
      = f.text_area :note,
        label: "備考 (下記のメッセージを端末の備考に追加します)",
        label_class: "me-1",
        value: "[#{current_user.username}から管理譲渡]"
      = f.submit "譲渡", class: "btn btn-primary ms-1"

  - if node.nics.count.positive?
    hr

    p = t("messages.node_nic_setting")

    - node.nics.each do |nic|
      h3
        = nic.number
        | 番目のネットワーク [
        = t(nic.interface_type, scope: "activerecord.enums.interface_types")
        | ]
        - if nic.name.present?
          | (
          = nic.name
          | )
      - if nic.nat?
        p
          |
            NATはファイアウォールで設定されるため、端末に設定する必要はありません。
      - else
        .row
          .col-md-6
            h4 IPv4
            - case nic.ipv4_config
            - when "dynamic", "reserved"
              - ip_data = { \
                setting: "自動",
                address: "-",
                netmask: "-",
                gateway: "-",
              }
            - when "static", "manual"
              - ip_data = { \
                setting: "手動",
                address: nic.ipv4_address.presence || sp,
                netmask: nic.network&.ipv4_netmask.presence || sp,
                gateway: nic.network&.ipv4_gateway.presence || sp,
              }
            - when "disabled"
              - ip_data = { \
                setting: "無効",
                address: "-",
                netmask: "-",
                gateway: "-",
              }

            dl.row.line
              dt.col-sm-6 = Nic.human_attribute_name(:ip_setting)
              dd.col-sm-6 = ip_data[:setting]
              dt.col-sm-6 = Nic.human_attribute_name(:ip_address)
              dd.col-sm-6 = ip_data[:address]
              dt.col-sm-6 = Network.human_attribute_name(:netmask)
              dd.col-sm-6 = ip_data[:netmask]
              dt.col-sm-6 = Network.human_attribute_name(:gateway)
              dd.col-sm-6 = ip_data[:gateway]
          - if Settings.config.ipv6
            .col-md-6
              h4 IPv6
              - case nic.ipv6_config
              - when "dynamic", "reserved"
                - ip_data = { \
                  setting: "自動",
                  address: "-",
                  prefix_length: "-",
                  gateway: "-",
                }
              - when "static", "manual"
                - ip_data = { \
                  setting: "手動",
                  address: nic.ipv6_address.presence || sp,
                  prefix_length: nic.network&.ipv6_prefix_length.presence || sp,
                  gateway: nic.network&.ipv6_gateway.presence || sp,
                }
              - when "disabled"
                - ip_data = { \
                  setting: "無効",
                  address: "-",
                  prefix_length: "-",
                  gateway: "-",
                }

              dl.row.line
                dt.col-sm-6 = Nic.human_attribute_name(:ip_setting)
                dd.col-sm-6 = ip_data[:setting]
                dt.col-sm-6 = Nic.human_attribute_name(:ip_address)
                dd.col-sm-6 = ip_data[:address]
                dt.col-sm-6 = Network.human_attribute_name(:prefix_length)
                dd.col-sm-6 = ip_data[:prefix_length]
                dt.col-sm-6 = Network.human_attribute_name(:gateway)
                dd.col-sm-6 = ip_data[:gateway]

    - if Settings.additional_messages.nic_setting
      p = Settings.additional_messages.nic_setting

  hr
  h3 特定端末の申請

  p DNS登録、外部公開、外部との直接通信が必要な場合は、特定端末の申請を行う必要があります。

  - if node.specific
    p
      | この端末は特定端末です。「変更」や「解除」が必要な場合は、申請画面から申請を行ってください。
    = link_to "特定端末申請画面へ",
      new_node_specific_node_application_path(node), class: "btn btn-secondary"
  - elsif node.confirmation&.status != :approved
    p
      | この端末は「確認」が「承認済み」ではないため、特定端末として申請することはできません。
      | 「確認」を実施し、端末の問題をすべて解決済みにしてください。
  - elsif node.nics.all? { |nic| nic.ipv4_data.nil? && nic.ipv6_data.nil? }
    p
      | この端末には固有のIPアドレスが割り当てられていないため、特定端末として申請することはできません。
      | ネットワークの設定で予約または固定を選択し、IPアドレスを割り当ててください。
  - else
    = link_to "特定端末申請画面へ",
      new_node_specific_node_application_path(node),
      class: "btn btn-secondary", data: {turbo: false}

  #node-confirm-modal.modal.fade tabindex="-1" role="dialog"
    .modal-dialog.modal-xl role="document"
      .modal-content
        = render "confirmations/form", confirmation: init_confirmation(@node)
