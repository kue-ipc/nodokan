- content_for :heading
  h1 端末情報

dl
  - if current_user.admin?
    = dt_dd_for @node, :user
  = dt_dd_for @node, :name
  = dt_dd_for @node, :fqdn
  = dt_dd_for @node, :place do |place|
    - if place&.name.present?
      = place.name
    - else
      .text-warning = t('messages.node_unregistered_place')
  = dt_dd_for @node, :hardware do |hardware|
    - if hardware
      - case hardware.device_type
      - when 'desktop'
        i.fas.fa-desktop
      - when 'laptop'
        i.fas.fa-laptop
      - when 'tablet'
        i.fas.fa-tablet-alt
      - when 'mobile'
        i.fas.fa-mobile-alt
      - when 'peripheral'
        i.fas.fa-print
      - when 'server'
        i.fas.fa-server
      - when 'appliance'
        i.fas.fa-hdd
      - when 'network'
        i.fas.fa-network-wired
      - when 'virtual'
        i.fas.fa-cloud
      - when 'other'
        i.fas.fa-blender-phone
      - when 'unknown'
        i.fas.fa-question-circle
      =< hardware.name
    - else
      .text-warning = t('messages.node_unregistered_hardware')
  = dt_dd_for @node, :operating_system do |operating_system|
    - if operating_system
      - case operating_system.os_category
      - when 'windows_client'
        i.fab.fa-windows
      - when 'windows_server'
        i.fab.fa-microsoft
      - when 'mac'
        i.fab.fa-apple
      - when 'apple'
        span.fa-stack style="font-size: 0.5em;"
          i.fas.fa-tablet.fa-stack-2x
          i.fab.fa-apple.fa-stack-1x.fa-inverse
      - when 'android'
        i.fab.fa-android
      - when 'linux'
        i.fab.fa-linux
      - when 'bsd'
        i.fab.fa-freebsd
      - when 'unix'
        i.fas.fa-university
      - when 'dedicated'
        i.fas.fa-compact-disc
      - when 'embedded'
        i.fas.fa-microchip
      - when 'other'
        i.fas.fa-blender-phone
      - when 'less'
        i.fas.fa-ghost
      - when 'unknown'
        i.fas.fa-question-circle
      =< operating_system.name
    - else
      .text-danger = t('messages.node_unregistered_operating_system')
  = dt_dd_for @node, :nics do |nics|
    - if nics.count.zero?
      .text-danger = t('messages.node_unregistered_nics')
    - else
      table.table.table-sm.mb-0
        thead
          tr
            th = Nic.human_attribute_name(:name)
            th = Nic.human_attribute_name(:interface_type)
            th = Nic.human_attribute_name(:mac_address)
            th = Nic.human_attribute_name(:network)
            th = Nic.human_attribute_name(:ipv4_config)
            th = Nic.human_attribute_name(:ipv4_address)
            th = Nic.human_attribute_name(:ipv6_config)
            th = Nic.human_attribute_name(:ipv6_address)
        tbody
          - nics.each do |nic|
            tr
              td = nic.name
              td = t(nic.interface_type, scope: 'activerecord.enums.interface_types')
              td = nic.mac_address
              td = nic.network&.name
              td = t(nic.ipv4_config, scope: 'activerecord.enums.ipv4_configs')
              td = nic.ipv4_address
              td = t(nic.ipv6_config, scope: 'activerecord.enums.ipv6_configs')
              td = nic.ipv6_address
  = dt_dd_for @node, :confirmation do |confirmation|
    - if confirmation&.confirmed_at.blank?
      i.fas.fa-times-circle.text-danger
      =< t(:unconfirmed, scope: :messages)
      .text-danger = t('messages.node_confirmaiton_unconfirmed')
    - elsif confirmation.expiration <= Time.current
      i.fas.fa-times-circle.text-danger
      =< l(confirmation.confirmed_at.to_date, format: :long)
      =< t(:expired, scope: :messages)
      .text-danger = t('messages.node_confirmaiton_exired')
    - elsif !confirmation.approved
      i.fas.fa-exclamation-circle.text-warning
      =<> l(confirmation.confirmed_at.to_date, format: :long)
      = t('messages.node_confirmaiton_expiration_date',
          date: l(confirmation.expiration.to_date, format: :long))
      =< t(:unapproved, scope: :messages)
      .text-warning = t('messages.node_confirmaiton_unapproved')
    - elsif confirmation.expiration <= Time.current.days_since(30)
      i.fas.fa-exclamation-circle.text-warning
      =<> l(confirmation.confirmed_at.to_date, format: :long)
      = t('messages.node_confirmaiton_expiration_date',
          date: l(confirmation.expiration.to_date, format: :long))
      =< t(:unapproved, scope: :messages)
      .text-warning = t('messages.node_confirmaiton_expiring_soon')
    - else
      i.fas.fa-check.text-success
      =<> l(confirmation.confirmed_at.to_date, format: :long)
      = t('messages.node_confirmaiton_expiration_date',
          date: l(confirmation.expiration.to_date, format: :long))
      =< t(:approved, scope: :messages)
  = dt_dd_for @node, :note

button#confirm-form-modal-toggle.btn.btn-primary[
  type="button" data-toggle="modal" data-target="#confirm-form-modal"]
  = t(:confirm, scope: [:actions])
=<> link_to t(:edit, scope: [:actions]), edit_node_path(@node),
  class: 'btn btn-warning'
=<> link_to t(:destroy, scope: [:actions]), @node,
  data: { confirm: t(:corfirm_destroy, scope: [:messages]) }, method: :delete,
  class: 'btn btn-danger'

- if @node.nics.count.positive?
  hr

  p = t('messages.node_nic_setting')

  - @node.nics.each do |nic|
    h3
      = t(nic.interface_type, scope: 'activerecord.enums.interface_types')
      | のネットワーク
    - if nic.name.present?
      | (
      = nic.name
      | )
    .row
      .col-md-6
        h4 IPv4
        - case nic.ipv4_config
        - when 'dynamic', 'reserved'
          - ip_data = { \
            setting: '自動',
            address: '-',
            netmask: '-',
            gateway: '-',
          }
        - when 'static', 'manual'
          - ip_data = { \
            setting: '手動',
            address: nic.ipv4_address.presence || raw('&nbsp;'),
            netmask: nic.network.ipv4_netmask.presence || raw('&nbsp;'),
            gateway: nic.network.ipv4_gateway.presence || raw('&nbsp;'),
          }
        - when 'disabled'
          - ip_data = { \
            setting: '無効',
            address: '-',
            netmask: '-',
            gateway: '-',
          }

        dl.row.line
          dt.col-sm-6 = Nic.human_attribute_name(:ip_setting)
          dd.col-sm-6 = ip_data[:setting]
          dt.col-sm-6 = Nic.human_attribute_name(:ip_address)
          dd.col-sm-6 = ip_data[:address]
          dt.col-sm-6 = Network.human_attribute_name(:netmask)
          dd.col-sm-6 = ip_data[:netmask]
          dt.col-sm-6 = Network.human_attribute_name(:gateway)
          dd.col-sm-6 = ip_data[:gateway]
      .col-md-6
        h4 IPv6
        - case nic.ipv6_config
        - when 'dynamic', 'reserved'
          - ip_data = { \
            setting: '自動',
            address: '-',
            prefix_length: '-',
            gateway: '-',
          }
        - when 'static', 'manual'
          - ip_data = { \
            setting: '手動',
            address: nic.ipv6_address.presence || raw('&nbsp;'),
            prefix_length: nic.network.ipv6_prefix_length.presence || \
                          raw('&nbsp;'),
            gateway: nic.network.ipv6_gateway.presence || raw('&nbsp;'),
          }
        - when 'disabled'
          - ip_data = { \
            setting: '無効',
            address: '-',
            prefix_length: '-',
            gateway: '-',
          }

        dl.row.line
          dt.col-sm-6 = Nic.human_attribute_name(:ip_setting)
          dd.col-sm-6 = ip_data[:setting]
          dt.col-sm-6 = Nic.human_attribute_name(:ip_address)
          dd.col-sm-6 = ip_data[:address]
          dt.col-sm-6 = Network.human_attribute_name(:prefix_length)
          dd.col-sm-6 = ip_data[:prefix_length]
          dt.col-sm-6 = Network.human_attribute_name(:gateway)
          dd.col-sm-6 = ip_data[:gateway]

  - if Settings.additional_messages.nic_setting
    p = Settings.additional_messages.nic_setting

hr
=< link_to t(:back, scope: [:actions]), nodes_path

= render 'confirm_form'

