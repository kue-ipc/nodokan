- content_for :heading
  h1 端末情報

dl
  = dt_dd_for @node, :name do |name|
    = name
    - if @node.specific
      span.badge.badge-danger.ml-1
        = Node.human_attribute_name(:specific)
  = dt_dd_for @node, :fqdn
  = dt_dd_for @node, :place do |place|
    - if place&.name.present?
      = place.name
    - else
      .text-warning = t('messages.node_unregistered_place')
  = dt_dd_for @node, :hardware do |hardware|
    - if hardware&.name.present?
      - if hardware.device_type
        - if hardware.device_type.icon.present?
          == hardware.device_type.icon
      - else
        i.fas.fa-question-circle
      =< hardware.name
    - else
      .text-warning = t('messages.node_unregistered_hardware')
  = dt_dd_for @node, :operating_system do |operating_system|
    - if operating_system
      - if operating_system.os_category.icon.present?
        == operating_system.os_category.icon
      =< operating_system.name
    - else
      .text-danger = t('messages.node_unregistered_operating_system')
  = dt_dd_for @node, :nics do |nics|
    - if nics.count.zero?
      .text-danger = t('messages.node_unregistered_nics')
    - else
      table.table.table-sm.mb-0
        thead
          tr
            th scope="col" = Nic.human_attribute_name(:number)
            th scope="col" = Nic.human_attribute_name(:interface_type)
            th scope="col"
              = Nic.human_attribute_name(:name)
              | /
              = Nic.human_attribute_name(:flags)
            th scope="col" = Nic.human_attribute_name(:mac_address)
            th scope="col" = Nic.human_attribute_name(:network)
            th scope="col" = Nic.human_attribute_name(:ipv4)
            - if Settings.config.ipv6
              th scope="col" = Nic.human_attribute_name(:ipv6)
        tbody
          - nics.each do |nic|
            tr
              td scope="row" = nic.number
              td
                = t(nic.interface_type, scope: 'activerecord.enums.interface_types')
              td
                = nic.name
                - if nic.locked
                  span.badge.badge-dark.ml-1
                    = Nic.human_attribute_name(:locked)
                - if nic.auth
                  span.badge.badge-primary.ml-1
                    = Nic.human_attribute_name(:auth)

              td = nic.mac_address
              td
                - if nic.network
                  = link_to nic.network.name, nic.network
              td
                = t(nic.ipv4_config, scope: 'activerecord.enums.ipv4_configs')
                =< nic.ipv4_address
              - if Settings.config.ipv6
                td
                  = t(nic.ipv6_config, scope: 'activerecord.enums.ipv6_configs')
                  =< nic.ipv6_address
  = dt_dd_for @node, :confirmation do |confirmation|
    - case confirmation.status
    - when :unconfirmed
      i.fas.fa-times-circle.text-danger
      =< t(:unconfirmed, scope: :messages)
      .text-danger = t('messages.node_confirmation_unconfirmed')
    - when :expired
      i.fas.fa-times-circle.text-danger
      =< l(confirmation.confirmed_at.to_date, format: :long)
      =< t(:expired, scope: :messages)
      .text-danger = t('messages.node_confirmation_expired')
    - when :unapproved
      i.fas.fa-exclamation-triangle.text-warning
      =<> l(confirmation.confirmed_at.to_date, format: :long)
      = t('messages.node_confirmation_expiration_date', date: l(confirmation.expiration.to_date, format: :long))
      =< t(:unapproved, scope: :messages)
      - case confirmation.existence
      - when 'existing'
        .text-warning = t('messages.node_confirmation_unapproved')
        - if confirmation.content_problem?
          .text-danger = t('messages.node_content_problem')
        - if @node.operating_system.nil?
          .text-danger = t('messages.node_no_operating_system')
        - if confirmation.unknown?
          .text-danger = t('messages.node_confirmation_unknown')
        - if confirmation.os_update_problem?
          - if confirmation.os_update_eol?
            .text-danger = t('messages.node_os_eol')
          - else
            .text-danger = t('messages.node_os_update_problem')

        - if confirmation.app_update_problem?
          - if confirmation.app_update_eol?
            .text-danger = t('messages.node_app_eol')
          - else
            .text-danger = t('messages.node_app_update_problem')

        - if @node.operating_system
          - if confirmation.security_software_unknown?
            .text-danger = t('messages.node_security_software_unknown')
          - else
            - if confirmation.security_software_problem?
              .text-danger = t('messages.node_security_software_problem')
            - if confirmation.security_update_problem?
              - if confirmation.security_update_eol?
                .text-danger = t('messages.node_security_eol')
              - else
                .text-danger = t('messages.node_security_update_problem')
            - if confirmation.security_scan_problem?
              .text-danger = t('messages.node_security_scan_problem')
      - when 'abandoned'
        .text-danger = t('messages.node_abandoned')
      - when 'missing'
        .text-danger = t('messages.node_missing')
      - when 'not_my_own'
        .text-danger = t('messages.node_not_my_own')
      - when 'unknown'
        .text-danger = t('messages.node_unknown')
    - when :expire_soon
      i.fas.fa-exclamation-triangle.text-warning
      =<> l(confirmation.confirmed_at.to_date, format: :long)
      = t('messages.node_confirmation_expiration_date', date: l(confirmation.expiration.to_date, format: :long))
      =< t(:expire_soon, scope: :messages)
      .text-warning = t('messages.node_confirmation_expiring_soon')
    - when :approved
      i.fas.fa-check.text-success
      =<> l(confirmation.confirmed_at.to_date, format: :long)
      = t('messages.node_confirmation_expiration_date', date: l(confirmation.expiration.to_date, format: :long))
      =< t(:approved, scope: :messages)
  = dt_dd_for @node, :note
  - if current_user.admin?
    = dt_dd_for @node, :user

button#confirm-form-modal-toggle.btn.btn-primary[
  type="button" data-toggle="modal" data-target="#confirm-form-modal"]
  = t(:confirm, scope: [:actions])
=<> link_to t(:edit, scope: [:actions]), edit_node_path(@node),
  class: 'btn btn-warning'

- if @node.confirmation.destroyable?
  hr
  h3 端末の削除
  - if @node.specific
    p
      strong 特定端末を直接は削除することできません。
      | 廃棄済み等の理由で端末を削除したい場合は、下記の特定端末の申請から「削除」を申請してください。
  - else
    p
      |
        端末が存在しない、または、不明の場合は削除してください。
        削除した端末はネットワークに接続できません。
    =<> link_to t(:destroy, scope: [:actions]), @node,
      data: { confirm: t('messages.corfirm_destroy_name', name: @node.name) },
      method: :delete,
      class: 'btn btn-danger'

- if @node.confirmation.transferable?
  hr
  h3 所有の譲渡
  p
    |
      端末の所有者(管理者)ではない場合は、本来の所有者に譲渡してください。
      譲渡先ユーザーのアカウント名のみを入力してください。

  = bootstrap_form_with url: transfer_node_path(@node), class: 'form-inline' do |f|
    = f.text_field :username, label: 'ユーザー名', label_class: 'mr-1'
    = f.submit '譲渡', class: 'btn btn-primary ml-1'

- if @node.nics.count.positive?
  hr

  p = t('messages.node_nic_setting')

  - @node.nics.each do |nic|
    h3
      = nic.number
      | 番目のネットワーク [
      = t(nic.interface_type, scope: 'activerecord.enums.interface_types')
      | ]
    - if nic.name.present?
      |< (
      = nic.name
      | )
    .row
      .col-md-6
        h4 IPv4
        - case nic.ipv4_config
        - when 'dynamic', 'reserved'
          - ip_data = { \
            setting: '自動',
            address: '-',
            netmask: '-',
            gateway: '-',
          }
        - when 'static', 'manual'
          - ip_data = { \
            setting: '手動',
            address: nic.ipv4_address.presence || raw('&nbsp;'),
            netmask: nic.network&.ipv4_netmask.presence || raw('&nbsp;'),
            gateway: nic.network&.ipv4_gateway.presence || raw('&nbsp;'),
          }
        - when 'disabled'
          - ip_data = { \
            setting: '無効',
            address: '-',
            netmask: '-',
            gateway: '-',
          }

        dl.row.line
          dt.col-sm-6 = Nic.human_attribute_name(:ip_setting)
          dd.col-sm-6 = ip_data[:setting]
          dt.col-sm-6 = Nic.human_attribute_name(:ip_address)
          dd.col-sm-6 = ip_data[:address]
          dt.col-sm-6 = Network.human_attribute_name(:netmask)
          dd.col-sm-6 = ip_data[:netmask]
          dt.col-sm-6 = Network.human_attribute_name(:gateway)
          dd.col-sm-6 = ip_data[:gateway]
      - if Settings.config.ipv6
        .col-md-6
          h4 IPv6
          - case nic.ipv6_config
          - when 'dynamic', 'reserved'
            - ip_data = { \
              setting: '自動',
              address: '-',
              prefix_length: '-',
              gateway: '-',
            }
          - when 'static', 'manual'
            - ip_data = { \
              setting: '手動',
              address: nic.ipv6_address.presence || raw('&nbsp;'),
              prefix_length: nic.network&.ipv6_prefix_length.presence || \
                            raw('&nbsp;'),
              gateway: nic.network&.ipv6_gateway.presence || raw('&nbsp;'),
            }
          - when 'disabled'
            - ip_data = { \
              setting: '無効',
              address: '-',
              prefix_length: '-',
              gateway: '-',
            }

          dl.row.line
            dt.col-sm-6 = Nic.human_attribute_name(:ip_setting)
            dd.col-sm-6 = ip_data[:setting]
            dt.col-sm-6 = Nic.human_attribute_name(:ip_address)
            dd.col-sm-6 = ip_data[:address]
            dt.col-sm-6 = Network.human_attribute_name(:prefix_length)
            dd.col-sm-6 = ip_data[:prefix_length]
            dt.col-sm-6 = Network.human_attribute_name(:gateway)
            dd.col-sm-6 = ip_data[:gateway]

  - if Settings.additional_messages.nic_setting
    p = Settings.additional_messages.nic_setting

hr
h3 特定端末の申請

p DNS登録、外部公開、外部との直接通信が必要な場合は、特定端末の申請を行う必要があります。

- if @node.specific
  p
    | この端末は特定端末です。「変更」や「解除」が必要な場合は、申請画面から申請を行ってください。
  = link_to '特定端末申請画面へ', new_node_specific_node_application_path(@node), class: 'btn btn-secondary'
- elsif @node.confirmation&.status != :approved
  p
    | この端末は「確認」が「承認済み」ではないため、特定端末として申請することはできません。
    | 「確認」を実施し、端末の問題をすべて解決済みにしてください。
- elsif @node.nics.all? { |nic| nic.ipv4_data.nil? && nic.ipv6_data.nil? }
  p
    | この端末には固有のIPアドレスが割り当てられていないため、特定端末として申請することはできません。
    | ネットワークの設定で予約または固定を選択し、IPアドレスを割り当ててください。
- else
  = link_to '特定端末申請画面へ', new_node_specific_node_application_path(@node), class: 'btn btn-secondary'

hr
=< link_to t(:back, scope: [:actions]), nodes_path

= render 'confirm_form'
