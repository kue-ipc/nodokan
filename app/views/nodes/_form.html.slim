= turbo_frame_tag node, autoscroll: true,
  data: {autoscroll_block: "start", turbo_action: :advance} do
  = render "model_errors", model: node

  p = t("forms.common.required_input")

  = bootstrap_form_with model: node do |f|
    .rounded.border.p-2.mb-2
      h4 = t("forms.node.base.title")
      .mb-2: small.text-muted = t("forms.node.base.help")
      .row
        .col-md-4
          = f.text_field :name, floating: true
        .col-md-3
          = f.text_field :hostname, pattern: "[0-9A-Za-z\\-]*", floating: true
        .col-md-5
          = f.text_field :domain, pattern: "[0-9A-Za-z\\-.]*", floating: true
      .row
        .col = f.check_box :logical
        .col = f.check_box :virtual_machine
        - if current_user.admin?
          .col = f.check_box :specific
          .col = f.check_box :public
          .col = f.check_box :dns
      - [:logical, :virtual_machine, :specific, :public, :dns].each do |name|
        = tag.div class: {collapse: true, "#{name}-show": true,
          show: node.send(name),}
          .row: .col
            = badge_for(node, name)
            small.text-secondary< = t("enabled", scope: ["forms", "node", name])

    / show if logical is enabled
    = tag.div class: {collapse: true, "logical-show": true, show: node.logical}
      = render "form_components", form: f

    / hide if logical is enabled
    = tag.div class: {collapse: true, "logical-hide": true, show: !node.logical}
      = tag.div class: {collapse: true, "virtual_machine-show": true,
        show: node.virtual_machine,}
        = render "form_host", form: f

      = tag.div class: {collapse: true, "virtual_machine-hide": true,
        show: !node.virtual_machine,}
        = render "form_place", form: f

      = render "form_hardware", form: f

      = render "form_operating_system", form: f

    = render "form_nics", form: f

    .rounded.border.p-2.mb-2
      = f.text_area :note, floating: true, class: "dobule-height"
      - if current_user.admin?
        .row
          .col-md-4
            = f.collection_select :user_id,
              User.order(:username).where(deleted: false),
              :id, :name, floating: true

    = f.submit class: "btn btn-primary"
    =< link_to t("actions.cancel"), node, class: "btn btn-dark",
      data: {turbo: node.id.present?}

  hr

  = render "help"
