- if @node.errors.any?
  #error_explanation
    h2 = "#{pluralize(@node.errors.count, "error")} " \
      "prohibited this node from being saved:"
    ul
      - @node.errors.full_messages.each do |message|
        li = message

p 【必須】の項目は入力が必須です。

= form_for @node do |f|
  .rounded.border.p-2.mb-2
    h4 端末基本情報
    .form-row
      .form-group.col-md-4
        = f.label :name, class: 'required-label'
        = f.text_field :name, class: 'form-control', required: true
      .form-group.col-md-3
        = f.label :hostname
        = f.text_field :hostname, class: 'form-control', pattern: "[0-9A-Za-z-]*"
      .form-group.col-md-5
        = f.label :domain, pattern: "[.0-9A-Za-z-]*"
        = f.text_field :domain, class: 'form-control'

  .rounded.border.p-2.mb-2
    h4 設置場所
    small.text-muted 候補に現れない場合は、そのまま名称を入力してください。管理者によって名称が統合される場合があります。
    .form-row
      = f.fields_for :place, @node.place || Place.new do |place_f|
        .form-group.col-md-3
          = place_f.label :area
          = place_f.text_field :area, class: 'form-control', list: 'area-list'
          datalist#area-list
            option value="Aキャンパス"
            option value="B学校"
        .form-group.col-md-3
          = place_f.label :building
          = place_f.text_field :building, class: 'form-control'
        .form-group.col-md-2
          = place_f.label :floor
          .input-group
            = place_f.number_field :floor, class: 'form-control'
            .input-group-append
              span.input-group-text 階
        .form-group.col-md-4
          = place_f.label :room
          = place_f.text_field :room, class: 'form-control', \
                               list: 'node_place_room-list'
          - node_place_room_params = {\
              parent: 'node', \
              name: 'place', \
              target: 'room', \
              inputList: ['area', 'building', 'floor'], \
              url: '/places.json', \
            }
          #node_place_room-app.datalist-canadidaiton(
            data-params=node_place_room_params.to_json
          )

  .rounded.border.p-2.mb-2
    h4 ハードウェア情報
    small.form-text.text-muted
      | 前の項目を埋めると候補が表示されます。候補に現れない場合は、そのまま名前を入れてください。管理者によって名前が統合される場合があります。
    .form-row
      = f.fields_for :hardware, @node.hardware || Hardware.new do |hardware_f|
        .form-group.col-md-2
          = hardware_f.label :device_type
          = hardware_f.select :device_type, t_enums(Hardware, :device_types), \
                          {prompt: '(未選択)'}, class: 'custom-select'
        .form-group.col-md-3
          = hardware_f.label :maker
          = hardware_f.text_field :maker, class: 'form-control'
        .form-group.col-md-4
          = hardware_f.label :product_name
          = hardware_f.text_field :product_name, class: 'form-control'
        .form-group.col-md-3
          = hardware_f.label :model_number
          = hardware_f.text_field :model_number, class: 'form-control'

  .rounded.border.p-2.mb-2
    h4 OS(オペレーティングシステム)情報
    small.form-text.text-muted
      |
        種別を選択するとOS名入力時に候補が表示されます。
        候補に現れない場合は、そのまま名前を入れてください。
        管理者によって名前が統合される場合があります。
    .form-row
      = f.fields_for :operating_system, \
          @node.operating_system || OperatingSystem.new do |operating_system_f|
        .form-group.col-md-4
          = operating_system_f.label :os_category
          = operating_system_f.select :os_category, t_enums(OperatingSystem, :os_categories), \
                          {prompt: '(未選択)'}, class: 'custom-select'
        .form-group.col-md-8
          = operating_system_f.label :name
          = operating_system_f.text_field :name, class: 'form-control', list: 'node_operating_system_name-list'
          - node_operating_system_name_params = {\
              parent: 'node', \
              name: 'operating_system', \
              target: 'name', \
              inputList: ['os_category'], \
              url: '/operating_systems.json', \
            }
          #node_operating_system_name-app.datalist-canadidaiton data-params=node_operating_system_name_params.to_json

  .rounded.border.p-2.mb-2
    h4 NIC(ネットワークインターフェースコントローラー)情報
    small.form-text.text-muted
      | 端末に備わっているネットワーク接続のインターフェースです。複数のネットワークに接続する場合は複数記載してください。
    - count = 0
    - nic_list = []
    = f.fields_for :nics do |nic_f|
      .rounded.border.p-2.mb-2.node-nic-root id="node_nics_attributes_#{nic_f.index}"
        - count += 1
        - nic_list << nic_f.index
        = nic_f.hidden_field :id
        h6
          => count
          | 番目のNIC
        .custom-control.custom-checkbox
          = nic_f.check_box :_destroy, class: 'custom-control-input'
          = nic_f.label :_destroy, 'このINCを削除する', class: 'custom-control-label'
        .form-row.node-nic-form
          .form-group.col-md-4
            = nic_f.label :interface_type
            = nic_f.select :interface_type, \
                            t_enums(Nic, :interface_types), \
                            {}, class: 'custom-select'
          .form-group.col-md-8
            = nic_f.label :name
            = nic_f.text_field :name, class: 'form-control'
          .form-group.col-md-4
            = nic_f.label :network
            = nic_f.collection_select :network_id, Network.all, \
                                       :id, :name, \
                                       {}, class: 'custom-select'
          .form-group.col-md-4
            = nic_f.label :mac_address
            = nic_f.text_field :mac_address, class: 'form-control', \
              pattern: '([0-9a-fA-F]{2}[-:]?){5}[0-9a-fA-F]{2}',
              placeholder: '00-00-5E-00-53-00'
          .form-group.col-md-4
            = nic_f.label :duid
            = nic_f.text_field :duid, class: 'form-control',
              pattern: '([0-9a-fA-F]{2}[:-]?)*[0-9a-fA-F]{2}',
              placeholder: '00-03-00-01-00-00-5E-00-53-00'
          .form-group.col-md-4
            = nic_f.label :ip_config
            = nic_f.select :ip_config, \
                            t_enums(Nic, :ip_configs), \
                            {}, class: 'custom-select'
          .form-group.col-md-8
            = nic_f.label :ip_address
            = nic_f.text_field :ip_address, \
                                class: 'form-control'
          .form-group.col-md-4
            = nic_f.label :ip6_config
            = nic_f.select :ip6_config, \
                            t_enums(Nic, :ip6_configs), \
                            {}, class: 'custom-select'
          .form-group.col-md-8
            = nic_f.label :ip6_address
            = nic_f.text_field :ip6_address, \
                                class: 'form-control'
    = f.submit 'NICを追加する', class: 'btn btn-secondary', name: 'add_nic'
    #node-nic-list.d-none data-list="#{nic_list.to_json}"

  .rounded.border.p-2.mb-2
    .form-row
      .form-group.col-md-12
        = f.label :note
        = f.text_area :note, class: 'form-control'
      .form-group.col-md-12
        = f.fields_for :user, @node.user || current_user do |user_f|
          = user_f.label :username, '端末管理者名'
          - if current_user.admin?
            = user_f.text_field :username, class: 'form-control'
          - else
            = user_f.text_field :username, class: 'form-control-plaintext', readonly: true
        end

  = f.submit class: 'btn btn-primary'

= javascript_pack_tag 'datalist-candidation', 'data-turbolinks-track': 'reload'
= javascript_pack_tag 'node-nic', 'data-turbolinks-track': 'reload'
