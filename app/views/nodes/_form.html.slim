- if @node.errors.any?
  .alert.alert-danger#error_explanation role="alert"
    h4 = t("errors.messages.not_saved", resource: @node, count: @node.errors.count)
    ul.mb-0
      - @node.errors.full_messages.each do |message|
        li = message

p = t("forms.common.required_input")

= bootstrap_form_with model: @node, data: {turbo: false} do |f|
  .d-none
    / ダミーでおいておかないと、NIC追加のサブミットが走る
    = f.submit class: "btn btn-primary"
  .rounded.border.p-2.mb-2
    h4 = t("forms.node.base.title")
    small.text-muted = t("forms.node.base.help")
    .row
      = f.text_field :name, required: true,
        wrapper_class: "col-md-4 mb-3"
      = f.text_field :hostname, pattern: "[0-9A-Za-z\\-]*",
        wrapper_class: "col-md-3 mb-3"
      = f.text_field :domain, pattern: "[0-9A-Za-z\\-.]*",
        wrapper_class: "col-md-5 mb-3"
    - if current_user.admin?
      .row
        .col
          = f.check_box :logical
        .col
          = f.check_box :specific
        .col
          = f.check_box :public
        .col
          = f.check_box :dns
        .col
          = f.check_box :virtual_machine
    - else
      .row
          .col
            = f.check_box :logical
          .col
            = f.check_box :virtual_machine
      - if @node.specific
        .row
          .col
            = badge_for(:specific, scope: "activerecord.attributes.node")
            small.text-muted<
              | この端末は特定端末として登録されています。(解除したい場合は、閲覧画面から特定端末の申請を行ってください。)
      - if @node.public
        .row
          .col
            = badge_for(:public, scope: "activerecord.attributes.node")
            small.text-muted<
              | この端末はインターネットに公開されています。(負荷分散装置やリバースプロキシ等により間接的に公開されている場合を含みます。)
      - if @node.dns
        .row
          .col
            = badge_for(:dns, scope: "activerecord.attributes.node")
            small.text-muted<
              | この端末はDNSに登録されています。(DNSに登録されているIPアドレスはロックされています。)
    .row.logical-show.d-none
      .col
        small.text-secondary<
          | 「論理」フラグが選択されています。この端末は実際には存在せず、クラスタや予約等の目的で登録されます。

  .rounded.border.p-2.mb-2.logical-hide
    h4 = t("forms.node.place.title")
    small.text-muted = t("forms.node.place.help")
    .row
      = f.fields_for :place, @node.place || Place.new do |place_f|
        = place_f.text_field :area, list: "node_place_area-list", wrapper_class: "col-md-3 mb-3"
        = datalist_canadidation :place, :area, places_path, parents: [:node]

        = place_f.text_field :building, list: "node_place_building-list", wrapper_class: "col-md-3 mb-3"
        = datalist_canadidation :place, :building, places_path, parents: [:node], inputList: [:area]

        - floor_list = 10.downto(-5).map { |i| [t_floor(i), i] }
        = place_f.select :floor, floor_list, wrapper_class: "col-md-2 mb-3"

        = place_f.text_field :room, list: "node_place_room-list", wrapper_class: "col-md-4 mb-3"
        = datalist_canadidation :place, :room, places_path, parents: [:node], order: {nodes_count: "desc"},
          inputList: [:area, :building, :floor]

  .rounded.border.p-2.mb-2.logical-hide
    h4 = t("forms.node.hardware.title")
    small.text-muted = t("forms.node.hardware.help")
    .row
      = f.fields_for :hardware, @node.hardware || Hardware.new do |hardware_f|
        = hardware_f.collection_select :device_type_id, DeviceType.order(:order), :id, :name,
          include_blank: "(未選択)", wrapper_class: "col-md-3 mb-3"

        = hardware_f.text_field :maker, list: "node_hardware_maker-list", wrapper_class: "col-md-2 mb-3"
        = datalist_canadidation :hardware, :maker, hardwares_path, parents: [:node], inputList: [:device_type_id]

        = hardware_f.text_field :product_name, list: "node_hardware_product_name-list", wrapper_class: "col-md-4 mb-3"
        = datalist_canadidation :hardware, :product_name, hardwares_path, parents: [:node],
          inputList: [:device_type_id, :maker]

        = hardware_f.text_field :model_number, list: "node_hardware_model_number-list", wrapper_class: "col-md-3 mb-3"
        = datalist_canadidation :hardware, :model_number, hardwares_path, parents: [:node],
          inputList: [:device_type_id, :maker, :product_name]

  .rounded.border.p-2.mb-2.logical-hide
    h4 = t("forms.node.operating_system.title")
    small.text-muted = t("forms.node.operating_system.help")
    .row
      = f.fields_for :operating_system,
        @node.operating_system || OperatingSystem.new do |operating_system_f|
        = operating_system_f.collection_select :os_category_id, OsCategory.order(:order), :id, :name,
          include_blank: "(未選択)", wrapper_class: "col-md-4 mb-3", required: false
        = operating_system_f.text_field :name, list: "node_operating_system_name-list", wrapper_class: "col-md-8 mb-3",
          disabled: true, required: false
        = datalist_canadidation :operating_system, :name, operating_systems_path, parents: [:node],
          order: {nodes_count: "desc"},
          inputList: [:os_category_id],
          requiredInput: :os_category_id,
          description: true,
          clear: true,
          locked: {name: :os_category_id, list: OsCategory.where(locked: true).map(&:id).map(&:to_s)}

    small#node_operating_system_name-description.form-text

  .rounded.border.p-2.mb-2
    .float-end
      = f.submit "NICを追加する", class: "btn btn-secondary", name: "add_nic", formnovalidate: true
    h4 = t("forms.node.nic.title")
    small.text-muted = t("forms.node.nic.help")
    .row
      = f.text_field :duid, pattern: "([0-9A-Fa-f]{2}[\\-:]?)*[0-9a-fA-F]{2}",
        wrapper_class: "col-md-4 mb-3"
    - count = 0
    - nic_list = []
    = f.fields_for :nics do |nic_f|
      .rounded.border.p-2.mb-2.node-nic-root(
        id="node_nics_attributes_#{nic_f.index}")
        - count += 1
        - nic_list << nic_f.index
        = nic_f.hidden_field :id
        h6
          => count
          | 番目のNIC
        - nic_ro = false

        - if current_user.admin?
          = nic_f.check_box :locked
        - elsif nic_f.object.locked
          - nic_ro = true
          = badge_for(:locked, scope: "activerecord.attributes.nic")
          small.text-muted<
            |
              このNICは管理者によってロックされているため、
              編集や削除はできません。

        - if nic_ro
          dl
            = dt_dd_for nic_f.object, :interface_type do |value|
              = t_enum(value, :interface_types)
            = dt_dd_for nic_f.object, :name
            = dt_dd_for nic_f.object, :mac_address
            = dt_dd_for nic_f.object, :auth
            = dt_dd_for nic_f.object, :network, &:name
            = dt_dd_for nic_f.object, :ipv4_config do |value|
              = t_enum(value, :ipv4_configs)
            = dt_dd_for nic_f.object, :ipv4_address
            = dt_dd_for nic_f.object, :ipv6_config do |value|
              = t_enum(value, :ipv6_configs)
            = dt_dd_for nic_f.object, :ipv6_address
        - else
          = nic_f.check_box :_destroy, label: "このNICを削除する"
          .row.node-nic-form
            = nic_f.collection_select :interface_type, t_enums(:interface_types, Nic), :first, :second,
                                      {prompt: "(選択してください)", wrapper_class: "col-md-4 mb-3"},
                            required: true
            = nic_f.text_field :name, wrapper_class: "col-md-8 mb-3"
            - nic_networks = current_user.usable_networks.to_a
            - if nic_f.object.network && nic_networks.exclude?(nic_f.object.network)
              - nic_networks << nic_f.object.network
            = nic_f.collection_select :network_id, nic_networks,
              :id, :name,
              {prompt: "(選択してください。)", wrapper_class: "col-md-4 mb-3"},
              required: true
            = nic_f.text_field :mac_address,
              pattern: "([0-9A-Fa-f]{2}[\\-:]?){5}[0-9a-fA-F]{2}",
              wrapper_class: "col-md-4"
            = nic_f.form_group :auth, label: {text: "認証ネットワーク登録"}, class: "col-md-4 mb-3" do
              = nic_f.check_box :auth, label: "MACアドレスを登録する"
            = nic_f.collection_select :ipv4_config, t_enums(:ipv4_configs, Nic), :first, :second,
                                      {wrapper_class: "col-md-4 mb-3"}
            = nic_f.text_field :ipv4_address,
              pattern: '((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.){3}(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)',
              wrapper_class: "col-md-4"
            .col-md-4
            - if Settings.config.ipv6
              = nic_f.collection_select :ipv6_config, t_enums(:ipv6_configs, Nic), :first, :second,
                                        {wrapper_class: "col-md-4 mb-3"}
              = nic_f.text_field :ipv6_address,
                pattern: '([\dA-Fa-f](?![\da-fA-F]{4})|:((?!:{2}))){2,39}',
                wrapper_class: "col-md-4"
            - prefix_message_id = "node_nics_attributes_#{nic_f.index}_message_"
            - %w(no_network unconfigurable auth_network require_mac require_duid network_note).each do |name|
              .col-md-12.form-text.d-none id="#{prefix_message_id}#{name}"
                = t(name, scope: "messages.node_nic")
    script#node-nic-info type="application/json"
      == { \
        list: nic_list,
        options: { \
          ipv6: Settings.config.ipv6,
          address_placeholders: t("messages.address_placeholders"),
        },
      }.to_json

  .rounded.border.p-2.mb-2
    = f.text_area :note
    - if current_user.admin?
      .row
        = f.collection_select :user_id,
          User.order(:username).where(deleted: false),
          :id, :name,
          {wrapper_class: "col-md-4 mb-3"}

  = f.submit class: "btn btn-primary"
