p 【必須】の項目は入力が必須です。

= bootstrap_form_for @node do |f|
  .d-none
    / ダミーでおいておかないと、NIC追加のサブミットが走る
    = f.submit class: 'btn btn-primary'
  .rounded.border.p-2.mb-2
    h4 端末基本情報
    .form-row
      = f.text_field :name, required: true,
        wrapper: {class: 'col-md-4'}
      = f.text_field :hostname, pattern: "[0-9A-Za-z-]*",
        wrapper: {class: 'col-md-3'}
      = f.text_field :domain, pattern: "[.0-9A-Za-z-]*",
        wrapper: {class: 'col-md-5'}

  .rounded.border.p-2.mb-2
    h4 設置場所
    small.text-muted 候補に現れない場合は、そのまま名称を入力してください。管理者によって名称が統合される場合があります。
    .form-row
      = f.fields_for :place, @node.place || Place.new do |place_f|
        = place_f.text_field :area,
                             list: 'node_place_area-list',
                             wrapper: {class: 'col-md-3'}
        - node_place_area_params = {parent: 'node',
                                    name: 'place',
                                    target: 'area',
                                    order: {area: 'asc'},
                                    inputList: [],
                                    url: '/places.json'}
        #node_place_area-app.datalist-canadidaiton(
          data-params=node_place_area_params.to_json
        )
        = place_f.text_field :building,
                             list: 'node_place_building-list',
                             wrapper: {class: 'col-md-3'}
        - node_place_building_params = {parent: 'node',
                                        name: 'place',
                                        target: 'building',
                                        order: {building: 'asc'},
                                        inputList: ['area'],
                                        url: '/places.json',}
        #node_place_building-app.datalist-canadidaiton(
          data-params=node_place_building_params.to_json
        )
        = place_f.select :floor,
          10.downto(-5).map { |i| [t_floor(i), i] },
          {wrapper: {class: 'col-md-2'}},
          class: 'custom-select'
        = place_f.text_field :room,
                             list: 'node_place_room-list',
                             wrapper: {class: 'col-md-4'}
        - node_place_room_params = {parent: 'node',
                                    name: 'place',
                                    target: 'room',
                                    order: {nodes_count: 'desc'},
                                    inputList: ['area', 'building', 'floor'],
                                    url: '/places.json'}
        #node_place_room-app.datalist-canadidaiton(
          data-params=node_place_room_params.to_json
        )

  .rounded.border.p-2.mb-2
    h4 機器情報
    small.form-text.text-muted
      | 前の項目を埋めると候補が表示されます。候補に現れない場合は、そのまま名前を入れてください。管理者によって名前が統合される場合があります。
    .form-row
      = f.fields_for :hardware, @node.hardware || Hardware.new do |hardware_f|
        = hardware_f.select :device_type, t_enums(Hardware, :device_types),
                            {include_blank: '(未選択)',
                             wrapper: {class: 'col-md-2'}},
                            class: 'custom-select'
        = hardware_f.text_field :maker,
                                list: 'node_hardware_maker-list',
                                disabled: true,
                                wrapper: {class: 'col-md-3'}
        - node_hardware_maker_params = {parent: 'node',
                                        name: 'hardware',
                                        target: 'maker',
                                        order: {maker: 'asc'},
                                        inputList: ['device_type'],
                                        requiredInput: 'device_type',
                                        url: '/hardwares.json'}
        #node_hardware_maker-app.datalist-canadidaiton(
          data-params=node_hardware_maker_params.to_json
        )
        = hardware_f.text_field :product_name,
                                list: 'node_hardware_product_name-list',
                                disabled: true,
                                wrapper: {class: 'col-md-4'}
        - node_hardware_product_name_params = {parent: 'node',
                                               name: 'hardware',
                                               target: 'product_name',
                                               order: {product_name: 'asc'},
                                               inputList: ['device_type',
                                                           'maker'],
                                               requiredInput: 'device_type',
                                               url: '/hardwares.json'}
        #node_hardware_product_name-app.datalist-canadidaiton(
          data-params=node_hardware_product_name_params.to_json
        )
        = hardware_f.text_field :model_number,
                                list: 'node_hardware_model_number-list',
                                disabled: true,
                                wrapper: {class: 'col-md-3'}
        - node_hardware_model_number_params = {parent: 'node',
                                               name: 'hardware',
                                               target: 'model_number',
                                               order: {model_number: 'asc'},
                                               inputList: ['device_type',
                                                           'maker',
                                                          'product_name'],
                                               requiredInput: 'device_type',
                                               url: '/hardwares.json'}
        #node_hardware_model_number-app.datalist-canadidaiton(
          data-params=node_hardware_model_number_params.to_json
        )

  .rounded.border.p-2.mb-2
    h4 OS(オペレーティングシステム)情報
    small.form-text.text-muted
      |
        種別を選択するとOS名入力時に候補が表示されます。
        候補に現れない場合は、そのまま名前を入れてください。
        管理者によって名前が統合される場合があります。
    .form-row
      = f.fields_for :operating_system,
        @node.operating_system || OperatingSystem.new do |operating_system_f|
        = operating_system_f.select :os_category,
          t_enums(OperatingSystem, :os_categories),
          {include_blank: '(未選択)', wrapper: {class: 'col-md-4'}},
          class: 'custom-select'
        = operating_system_f.text_field :name,
          list: 'node_operating_system_name-list',
          disabled: true,
          wrapper: {class: 'col-md-8'}
        - node_operating_system_name_params = { \
            parent: 'node',
            name: 'operating_system',
            target: 'name',
            order: {nodes_count: 'desc'},
            inputList: ['os_category'],
            url: '/operating_systems.json',
            requiredInput: 'os_category',
            description: true,
          }
        #node_operating_system_name-app.datalist-canadidaiton data-params=node_operating_system_name_params.to_json
    small#node_operating_system_name-description.form-text

  .rounded.border.p-2.mb-2
    h4 NIC(ネットワークインターフェースコントローラー)情報
    small.form-text.text-muted
      | 端末に備わっているネットワーク接続のインターフェースです。複数のネットワークに接続する場合はNICを追加してください。不要なNICは削除してください。
    - count = 0
    - nic_list = []
    = f.fields_for :nics do |nic_f|
      .rounded.border.p-2.mb-2.node-nic-root id="node_nics_attributes_#{nic_f.index}"
        - count += 1
        - nic_list << nic_f.index
        = nic_f.hidden_field :id
        h6
          => count
          | 番目のNIC
        = nic_f.check_box :_destroy, custom: true, label: 'このINCを削除する'
        .form-row.node-nic-form
          = nic_f.select :interface_type,
                          t_enums(Nic, :interface_types),
                          {prompt: '(選択してください)',
                           wrapper: {class: 'col-md-4'}},
                          class: 'custom-select', required: true
          = nic_f.text_field :name,
            disabled: true,
            wrapper: {class: 'col-md-8'}
          - selectable_networks = policy_scope(Network)
          - if nic_f.object.network && !selectable_networks.include?(nic_f.object.network)
            - selectable_networks << nic_f.object.network
          = nic_f.collection_select :network_id, selectable_networks,
            :id, :name,
            {include_blank: '(未接続)',
            wrapper: {class: 'col-md-4'}},
            disabled: true,
            class: 'custom-select'
          = nic_f.select :ipv4_config,
                          t_enums(Nic, :ipv4_configs),
                          {wrapper: {class: 'col-md-4'}},
                          class: 'custom-select', disabled: true
          = nic_f.text_field :mac_address,
            pattern: '([0-9a-fA-F]{2}[-:]?){5}[0-9a-fA-F]{2}',
            disabled: true,
            wrapper: {class: 'col-md-4'}
          - if Settings.config.ip6
            = nic_f.select :ipv6_config, t_enums(Nic, :ipv6_configs),
                            {wrapper: {class: 'offset-md-4 col-md-4'}}, class: 'custom-select', disabled: true
            = nic_f.text_field :duid,
              pattern: '([0-9a-fA-F]{2}[:-]?)*[0-9a-fA-F]{2}',
              disabled: true,
              wrapper: {class: 'col-md-4'}
          .col-md-12.form-text
            =<> badge(Network.human_attribute_name(:auth),
              level: :danger,
              enabled: false,
              id: "node_nics_attributes_#{nic_f.index}_badge_auth")
            =<> badge(Network.human_attribute_name(:dhcp),
              level: :primary,
              enabled: false,
              id: "node_nics_attributes_#{nic_f.index}_badge_dhcp")
            =<> badge(Network.human_attribute_name(:closed),
              level: :dark,
              enabled: false,
              id: "node_nics_attributes_#{nic_f.index}_badge_closed")
            small id="node_nics_attributes_#{nic_f.index}_network_message"
    = f.submit 'NICを追加する', class: 'btn btn-secondary', name: 'add_nic',
      formnovalidate: true
    script#node-nic-info type="application/json"
      == {list: nic_list}.to_json

  .rounded.border.p-2.mb-2
    = f.text_area :note

  = f.submit class: 'btn btn-primary'

= javascript_pack_tag 'datalist-candidation', 'data-turbolinks-track': 'reload'
= javascript_pack_tag 'node-nic', 'data-turbolinks-track': 'reload'
