// GET nodes/:id
// confirmation form

import {Collapse, Modal} from "bootstrap"

class NodeConfirm
  @(@modalEl)
    @modal = Modal.getOrCreateInstance(@modalEl)

    @modalEl.addEventListener "shown.bs.modal", ->
      location.hash = "confirm"

    @modalEl.addEventListener "hidden.bs.modal", ->
      location.hash = ""

    @collapseEl = document.getElementById("node-confirm-collapse")
    @collapse = Collapse.getOrCreateInstance(@collapseEl, toggle: false)
    @collapseShown = false

    @collapseEl.addEventListener "shown.bs.collapse", =>
      @collapseShown = true
      for el of @collapseEl.querySelectorAll("input,select")
        if el.type is not "checkbox"
          el.required = true

    @collapseEl.addEventListener "hidden.bs.collapse", =>
      @collapseShown = false
      for el of @collapseEl.querySelectorAll("input,select")
        if el.type is not "checkbox"
          el.required = false
    

    for el of @modalEl.querySelectorAll('input[name="confirmation[existence]"]')
      if el.value is "existing"
        @collapse.show() if el.checked

        el.addEventListener "change", =>
          @collapse.show()
      else
        el.addEventListener "change", =>
          @collapse.hide()

    for attrName of ["os_update", "app_update"]
      collapseSecuredEl :=
        document.getElementById(`node-confirm-secured-${attrName}`)
      collapseSecured :=
        Collapse.getOrCreateInstance(collapseSecuredEl, toggle: false)
      for el of document.querySelectorAll(
        `input[name="confirmation[${attrName}]"]`)
        if el.value is "secured"
          collapseSecured.show() if el.checked

          el.addEventListener "change", =>
            collapseSecured.show()
        else
          el.addEventListener "change", =>
            collapseSecured.hide()

    for attrName of ["security_hardwares"]
      exclusiveValues := ["none", "unknown"]
      checkElList := document.getElementsByName(`confirmation[${attrName}][]`)

      for el of checkElList
        el.addEventListener "change", (event) =>
          if event.target.checked
            if exclusiveValues.includes(event.target.value)
              for otherEl of checkElList
                if otherEl.value is not event.target.value
                  otherEl.checked = false
            else
              for exclusiveEl of checkElList
                if exclusiveValues.includes(exclusiveEl.value)
                  exclusiveEl.checked = false

    for el of document.getElementsByName(`commit`)
      el.addEventListener `click`, (event) =>
        for attrName of ["security_hardwares"]
          checkElList :=
            document.getElementsByName(`confirmation[${attrName}][]`)
          requiredFlag := @collapseShown &&
            [...checkElList].filter(.checked).# is 0
          for el of checkElList
            el.required = requiredFlag

  modalShow()
    @modal.show()

LOADED_ELEMENTS := new WeakSet()

export loadNodeConfirm: (element?: Element) => void := (element) ->
  el := document.getElementById("node-confirm-modal")
  return unless el?

  if LOADED_ELEMENTS.has(el)
    console.warn `[node_confirmation] element is already loaded: ${el.id}`
    return

  nc := new NodeConfirm(el)
  LOADED_ELEMENTS.add(el)
  nc.modalShow() if location.hash is "#confirm"
