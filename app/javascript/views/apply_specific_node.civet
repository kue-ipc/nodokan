// GET nodes/:id/specific_node_application/new
// apply specific node

type HTMLFormControlElement = HTMLInputElement | HTMLSelectElement |
  HTMLTextAreaElement

// document.addEventListener "turbo:load", ->
// LOADED_ELEMENTS := new WeakSet()

export loadApplySpecifiNode: (element?: Element) => void := (element) ->
  reasonText := document.getElementById("specific_node_application_reason")
  return unless reasonText?

  actionRadioMap: Map<string, HTMLInputElement> := new Map
  for el of document.getElementsByName("specific_node_application[action]")
    actionRadioMap.set(el.value, el) if el <? HTMLInputElement

  ruleSetRadioMap: Map<string, HTMLInputElement> := new Map
  for el of document.getElementsByName("specific_node_application[rule_set]")
    ruleSetRadioMap.set(el.value, el) if el <? HTMLInputElement

  externalSelect :=
    document.getElementById("specific_node_application_external")
  unless externalSelect <? HTMLSelectElement
    console.warn "[apply_specific_node] external select not found"
    return

  ruleListTextArea :=
    document.getElementById("specific_node_application_rule_list")
  unless ruleListTextArea <? HTMLTextAreaElement
    console.warn "[apply_specific_node] rule list text area not fonud"
    return

  registerDnsCheckBox :=
    document.getElementById("specific_node_application_register_dns")
  unless registerDnsCheckBox <? HTMLInputElement
    console.warn "[apply_specific_node] register dns check box not fonud"
    return

  previousRegisterDns := registerDnsCheckBox.previousElementSibling
  unless previousRegisterDns <? HTMLInputElement
    console.warn "[apply_specific_node] previous register dns not fonud"
    return


  fqdnText := document.getElementById("specific_node_application_fqdn")
  unless fqdnText <? HTMLInputElement
    console.warn "[apply_specific_node] fqdn text not fonud"
    return

  labelFor: (el: HTMLElement) => HTMLLabelElement | null := (el) ->
    document.querySelector<HTMLLabelElement>(`label[for="${el.id}"]`)

  setRequired: (...list: HTMLFormControlElement[]) => void := (...list) ->
    for el of list
      el.required = true
      labelFor(el)?.classList?.add("required")

  unsetRequired: (...list: HTMLFormControlElement[]) => void := (...list) ->
    for el of list
      el.required = false
      labelFor(el)?.classList?.remove("required")

  setDisabled: (...list: HTMLFormControlElement[]) => void := (...list) ->
    for el of list
      el.disabled = true

  unsetDisabled: (...list: HTMLFormControlElement[]) => void := (...list) ->
    for el of list
      el.disabled = false

  checkAction: () => void := ->
    if actionRadioMap.get("release")?.checked
      setDisabled(
        ...ruleSetRadioMap.values(),
        externalSelect,
        ruleListTextArea,
        registerDnsCheckBox,
        fqdnText,
      )
    else
      unsetDisabled(
        ...ruleSetRadioMap.values(),
        externalSelect,
        ruleListTextArea,
        registerDnsCheckBox,
        fqdnText,
      )
    checkRuleSet()

  checkRuleSet: () => void := ->
    for el of ruleSetRadioMap.values()
      continue unless el.checked

      if Number(el.value) >= 0
        for option of externalSelect.getElementsByTagName("option")
          if option.value == el.dataset.external
            option.selected = true
            option.disabled = false
          else
            option.selected = false
            option.disabled = true

        ruleListTextArea.value = JSON.parse(el.dataset?.list ?? "").join("\n")
        ruleListTextArea.readOnly = true

        if ["true", "1", "on"].includes(el.dataset?.dns?.toLowerCase() ?? "")
          previousRegisterDns.value = "1"
          registerDnsCheckBox.checked = true
        else
          previousRegisterDns.value = "0"
          registerDnsCheckBox.checked = false
        registerDnsCheckBox.disabled = true

        unsetRequired(externalSelect, ruleListTextArea)

      else
        for option of externalSelect.getElementsByTagName("option")
          option.selected = false
          option.disabled = false

        ruleListTextArea.value = ""
        ruleListTextArea.readOnly = false

        previousRegisterDns.value = "0"
        registerDnsCheckBox.checked = false
        registerDnsCheckBox.disabled = false

        setRequired(externalSelect, ruleListTextArea)

      checkDns()

  checkExternal: () => void := ->
    if ["none", "direct"].includes(externalSelect.value)
      ruleListTextArea.value = ""
      ruleListTextArea.readOnly = true
      unsetRequired(ruleListTextArea)
    else
      ruleListTextArea.readOnly = false
      setRequired(ruleListTextArea)

  checkDns: () => void := ->
    if registerDnsCheckBox.checked
      setRequired(fqdnText)
    else
      unsetRequired(fqdnText)

  for el of actionRadioMap.values()
    el.addEventListener "click", ->
      checkAction()

  for el of ruleSetRadioMap.values()
    el.addEventListener "click", ->
      checkRuleSet()

  externalSelect.addEventListener "click", ->
    checkExternal()

  registerDnsCheckBox.addEventListener "click", ->
    checkDns()

  checkAction()
