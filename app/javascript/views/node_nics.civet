// node nics

import {listToSnake, listToField} from "../utils/string_utils.civet"
import Network from "../models/network.civet"
import MessageStore from "../utils/message_store.civet"

namespace NodeNic
  export type Name = typeof NodeNic.NAMES[number]
  export interface InputInit
    value: string?
    checked?: boolean
    selectedIndex?: number

  export interface Input
    node: HTMLInputElement | HTMLSelectElement
    init: InputInit
    options?: HTMLOptionElement[]
    hidden?: HTMLInputElement

class NodeNic
  @NAMES := [
    "_destroy"
    "interface_type"
    "name"
    "network_id"
    "auth"
    "mac_address"
    "ipv4_config"
    "ipv4_address"
    "ipv6_config"
    "ipv6_address"
  ] as const

  rootNode: Element
  messageStore: MessageStore
  id: string
  prefixList: string[]
  inputMap: Map<NodeNic.Name, NodeNic.Input?>
  duidNode: HTMLInputElement
  messagesNode: HTMLElement
  messageTemplateNode: HTMLTemplateElement
  network: Network?

  @(@rootNode: Element,
    {@messageStore = new MessageStore({})}: {messageStore?: MessageStore} = {})
    console.debug `NodeNic: ${@rootNode.id}`
    idMatches := @rootNode.id.match(/^node_nics_attributes_(\d+)$/)
    unless idMatches?
      throw new Error("[NodeNic] element's id not match node_nics_attributes_*")
    @id = idMatches[1]
    @prefixList = ["node", "nics_attributes", @id]

    @inputMap = new Map(
      NodeNic.NAMES.map (name) => [name, @getInput(name)]
    )

    duidNode := document.getElementById("node_duid")
    unless duidNode <? HTMLInputElement
      throw new Error("[NodeNic] node duid not found")
    @duidNode = duidNode
 
    messagesNode := @getNode("messages")
    unless messagesNode?
      throw new Error("[NodeNic] messages not found")
    @messagesNode = messagesNode

    messageTemplateNode := @getNode("message", "template")
    unless messageTemplateNode <? HTMLTemplateElement
      throw new Error("[NodeNic] message template not found")
    @messageTemplateNode = messageTemplateNode

    @inputMap.get("_destroy")?.node.addEventListener "change", (_e) =>
      @changeDestroy()
    @inputMap.get("interface_type")?.node.addEventListener "change", (_e) =>
      @changeInterfaceType()
    @inputMap.get("network_id")?.node.addEventListener "change", (_e) =>
      @changeNetwork()

    @inputMap.get("auth")?.node.addEventListener "change", (_e) =>
      @requireMacAddress()

    @inputMap.get("ipv4_config")?.node?.addEventListener "change", (e) =>
      @requireMacAddress()
      @adjustAddress("ipv4")
    @inputMap.get("ipv6_config")?.node.addEventListener "change", (e) =>
      @requireDuid()
      @adjustAddress("ipv6")

    @requireMacAddress()
    @requireDuid()

    // changeDestroyを呼び出すとすべての変更が呼び出される
    @changeDestroy()

  getNodeId(...names: string[]): string
    listToSnake(...@prefixList, ...names)

  getNode(...names: string[]): HTMLElement | null
    document.getElementById(@getNodeId(...names))

  getInput(name: NodeNic.Name): NodeNic.Input?
    node := @getNode(name)
    switch node
      <? HTMLInputElement
        if node.type is "checkbox"
          hidden := [...document.getElementsByName(node.name)]
            .find (el) -> el <? HTMLInputElement and el.type is "hidden"
          unless hidden <? HTMLInputElement
            throw new Error(`[NodeNic] hidden input not found: ${name}`)
          {node, init: {value: node.value, checked: node.checked}, hidden}
        else
          {node, init: {value: node.value}}
      <? HTMLSelectElement
        {
          node
          init: {value: node.value, selectedIndex: node.selectedIndex}
          options: [...node.options]
        }
      else
        if node?
          throw new Error(`[NodeNic] invalid element type: ${name}`)
        else
          return

  disableInputs(names: NodeNic.Name[]): void
    for name of names
      console.debug `disbale: ${name}`
      {node, hidden} := @inputMap.get(name) || {}
      continue unless node?

      // チェックボックスはhiddenに現在の設定値を入れて固定化する
      if node <? HTMLInputElement and node.type is "checkbox" and hidden?
        hidden.value = if node.checked then "1" else "0"

      node.disabled = true

  enableInputs(names: NodeNic.Name[]): void
    for name of names
      console.debug `enable: ${name}`
      {node, hidden} := @inputMap.get(name) || {}
      continue unless node?

      // チェックボックスはhiddenを0に戻す
      if node <? HTMLInputElement and node.type is "checkbox" and hidden?
        hidden.value = "0"

      node.disabled = false

  addMessage(message: string): void
    messageRoot := @messageTemplateNode.content.cloneNode(true)
    unless messageRoot <? DocumentFragment or messageRoot <? Element
      console.warn "[NodeNic] no document frament nor element in template"
      return
    messageNode := messageRoot.querySelector(".message")
    unless messageNode <? Element
      console.warn "[NodeNic] no message element in template"
      return
    messageNode.textContent = message
    @messagesNode.appendChild(messageRoot)

  clearMessages(): void
    while @messagesNode.firstChild
      last := @messagesNode.lastChild
      @messagesNode.removeChild(last) if last?

  adjustConfig(ip: "ipv4" | "ipv6"): void
    // networkがなければ、何もしない
    return unless @network?

    input := @inputMap.get(`${ip}_config`)
    return unless input?
    {node, init, options} := input
    unless node <? HTMLSelectElement
      console.warn `[NodeNic] not selet element for ${ip}_config`
      return
    unless options?
      console.warn `[NodeNic] no options for ${ip}_config`
      return

    list := @network?[`${ip}_config_list`]
    for el of options
      if list.includes(el.value)
        el.disabled = false
      else
        el.disabled = true

    selectedOption := node.selectedOptions.item(0)    

    if @checkInitInput("network_id")
      node.selectedIndex = init.selectedIndex || -1
    else if selectedOption !<? HTMLOptionElement or
        selectedOption.disabled or
        selectedOption.value is "disabled"
      node.selectedIndex = 
        (options.findIndex (el) -> !el.disabled) ||
        (options.findIndex (el) -> el.value is "disabled") ||
        -1

    @adjustAddress(ip)

  adjustAddress(ip: "ipv4" | "ipv6"): void
    input := @inputMap.get(`${ip}_address`)
    return unless input?
    {node, init} := input
    unless node <? HTMLInputElement
      console.warn `[NodeNic] not input element for ${ip}_config`
      return

    config := @inputMap.get(`${ip}_config`)?.node.value || "disabled"

    node.placeholder =
      @messageStore.get(config, scope: "no_address",default: "")
    node.value =
      if @checkInitInput("network_id") && @checkInitInput(`${ip}_config`)
        init.value || ""
      else
        ""

    node.disabled =
      ["dynamic", "disabled", "mapped"].includes(config) or
        not @network?.current_user.manageable

  requireMacAddress(): void
    macAddressNode := @inputMap.get("mac_address")?.node
    unless macAddressNode <? HTMLInputElement
      console.warn "[NodeNic] not input element for mac_address"
      return
    authNode := @inputMap.get("auth")?.node

    if (authNode <? HTMLInputElement and authNode.checked) or
        @inputMap.get("ipv4_config")?.node.value is "reserved"
      macAddressNode.required = true
      @addMessage(@messageStore.get("helps.require_mac"))
    else
      macAddressNode.required = false

  requireDuid(): void
    if @inputMap.get("ipv6_config")?.node?.value is "reserved"
      @duidNode.required = true
      @addMessage(@messageStore.get("helps.require_duid"))
    else
      @duidNode.required = false

  setInitInput(name: NodeNic.Name): void
    input := @inputMap.get(name)
    return unless input?

    {node, init} := input

    switch node
      <? HTMLInputElement
        if node.type is "checkbox"
          node.checked = init.checked || false
        else
          node.value = init.value || ""
      <? HTMLSelectElement
        node.selectedIndex = init.selectedIndex || -1

  checkInitInput(name: NodeNic.Name): boolean
    input := @inputMap.get(name)
    return false unless input?
    {node, init} := input

    switch node
      <? HTMLInputElement
        if node.type is "checkbox"
          node.checked is init.checked
        else
          node.value is init.value
      <? HTMLSelectElement
        node.selectedIndex is init.selectedIndex
      else
        false

  changeDestroy(): void
    destroyNode := @inputMap.get("_destroy")?.node
    unless destroyNode <? HTMLInputElement
      console.warn "[NodeNic] destroy input not found"
      return

    if destroyNode.checked
      @disableInputs(NodeNic.NAMES.filter & is not "_destroy")
    else
      @enableInputs(["interface_type"])
      @changeInterfaceType()

  changeInterfaceType(): void
    interfaceTypeNode := @inputMap.get("interface_type")?.node
    unless interfaceTypeNode <? HTMLSelectElement
      console.warn "[NodeNic] interafec_type select not found"
      return

    if interfaceTypeNode.value
      @enableInputs(["name", "network_id", "mac_address"])
      @changeNetwork()
    else
      @disableInputs(NodeNic.NAMES
        .filter (name) -> not ["_destroy", "interface_type"].includes(name))

  changeNetwork(): Promise<void>
    @clearMessages()

    networkIdNode := @inputMap.get("network_id")?.node
    unless networkIdNode <? HTMLSelectElement
      console.warn "[NodeNic] network_id select not found"
      return
    networkId := networkIdNode.value
    authNode := @inputMap.get("auth")?.node

    @network = if networkId then await Network.fetch(networkId) else undefined

    if @network
        // auth
        if @network.auth
          @addMessage(@messageStore.get("helps.auth_network"))
          if @checkInitInput("network_id")
            @setInitInput("auth")
          else
            authNode.checked = true if authNode <? HTMLInputElement
          @enableInputs(["auth"])
        else
          authNode.checked = false if authNode <? HTMLInputElement
          @disableInputs(["auth"])

        // note
        if @network.note
          @addMessage(@network.note)

        @enableInputs(["ipv4_config", "ipv6_config"])
    else if networkId
      @setInitInput("auth")
      @setInitInput("ipv4_config")
      @setInitInput("ipv6_config")
      @disableInputs(["auth", "ipv4_config", "ipv6_config"])
      @addMessage(@messageStore.get("helps.unconfigurable"))
    else
      authNode.checked = false if authNode <? HTMLInputElement
      @disableInputs(["auth", "ipv4_config", "ipv6_config"])
      @addMessage(@messageStore.get("helps.no_network"))

    @adjustConfig("ipv4")
    @adjustConfig("ipv6")
    @requireMacAddress()
    @requireDuid()

let messageStore: MessageStore

LOADED_ELEMENTS := new WeakSet()

export loadNodeFlags: (element?: Element) => void := (element) ->

export loadNodeNics: (element?: Element) => void := (element) ->
  return if element? and not element.id.includes("node_")

  unless messageStore?
    messagesNode := document.getElementById("node-nic-messages")
    if messagesNode?
      messages := JSON.parse(messagesNode.textContent || "{}")
      messageStore = new MessageStore(messages)

  for el of document.getElementsByClassName("node-nic-frame")
    if LOADED_ELEMENTS.has(el)
      console.warn `[node_nics] element is already loaded: ${el.id}`
      continue

    new NodeNic(el, {messageStore})
    LOADED_ELEMENTS.add(el)
