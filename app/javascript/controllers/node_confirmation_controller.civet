import {Controller} from "@hotwired/stimulus"
import {Collapse} from "bootstrap"

// Connects to data-controller="node-confirmation"
export default class NodeConfirmationController < Controller<HTMLFormElement>
  @targets := [
    "existence"
    "content"
    "osUpdate"
    "appUpdate"
    "software"
    "securityHardwares"
    "securitySoftwareInstallationMethod"
    "securitySoftwareName"
    "securityUpdate"
    "securityScan"
    "collapse"
    "collapseOsUpdateSecured"
    "collapseAppUpdateSecured"
  ]

  // declare readonly existencTargets: HTMLInputElement[] // radio
  // ...
  // declare readonly collapseTarget: HTMLDivElement
  
  collapse?: Collapse
  collapseOsUpdateSecured?: Collapse
  collapseAppUpdateSecured?: Collapse

  connect(): void
    @collapse = new Collapse(@collapseTarget, toggle: false)
    @collapseOsUpdateSecured = new Collapse(@collapseOsUpdateSecuredTarget,
      toggle: false)
    @collapseAppUpdateSecured = new Collapse(@collapseAppUpdateSecuredTarget,
      toggle: false)

    @collapseTarget.addEventListener "show.bs.collapse", =>
      @setRequiredAll(true)
    @collapseTarget.addEventListener "hide.bs.collapse", =>
      @setRequiredAll(false)

    unless @existenceTargets.find((e) -> e.value is "existing").checked
      @collapse?.hide()

    if @osUpdateTargets.find((e) -> e.value is "secured").checked
      @collapseOsUpdateSecured?.show()

    if @appUpdateTargets.find((e) -> e.value is "secured").checked
      @collapseAppUpdateSecured?.show()

  setRequiredAll(required: boolean): void
    @contentTargets.forEach (e) -> e.required = required
    @osUpdateTargets.forEach (e) -> e.required = required
    @appUpdateTargets.forEach (e) -> e.required = required
    @softwareTargets.forEach (e) -> e.required = required
    if @hasSecuritySoftwareInstallationMethodTarget
      @securitySoftwareInstallationMethodTarget.required = required
    if @hasSecuritySoftwareNameTarget
      @securitySoftwareNameTarget.required = required
    @securityUpdateTargets.forEach (e) -> e.required = required
    @securityScanTargets.forEach (e) -> e.required = required
    @checkSecurityHardwares(required)

  changeExistence(event: Event): void
    target := event.target
    unless target <? HTMLInputElement
      console.warn `target is not HTMLInptuElement: ${target}`
      return

    if target.value is "existing"
      @collapse?.show()
    else
      @collapse?.hide()

  changeOsUpdate(event: Event): void
    target := event.target
    unless target <? HTMLInputElement
      console.warn `target is not HTMLInptuElement: ${target}`
      return

    if target.value is "secured"
      @collapseOsUpdateSecured?.show()
    else
      @collapseOsUpdateSecured?.hide()

  changeAppUpdate(event: Event): void
    target := event.target
    unless target <? HTMLInputElement
      console.warn `target is not HTMLInptuElement: ${target}`
      return

    if target.value is "secured"
      @collapseAppUpdateSecured?.show()
    else
      @collapseAppUpdateSecured?.hide()

  changeSecurityHardwares(event: Event): void
    target := event.target
    unless target <? HTMLInputElement
      console.warn `target is not HTMLInptuElement: ${target}`
      return
    
    exclusiveValues := ["none", "unknown"]
    // "none", "unkonwn" のみ排他
    if target.checked
      if target.value is in exclusiveValues
        for each e of @securityHardwaresTargets
          if e.value is not target.value
            e.checked = false
      else
        for each e of @securityHardwaresTargets
          if e.value is in exclusiveValues
            e.checked = false

    @checkSecurityHardwares()

  checkSecurityHardwares(required: boolean = true): void
    checked .= false
    for each e of @securityHardwaresTargets
      if e.checked
        checked = true
        e.required = required
      else if !checked && e.value is "unknown"
        e.required = required
      else
        e.required = false
