import {Controller} from "@hotwired/stimulus"
import {Collapse} from "bootstrap"

// Connects to data-controller="node-confirmation"
export default class NodeConfirmationController < Controller<HTMLFormElement>
  @targets := [
    "existence"
    "content"
    "osUpdate"
    "appUpdate"
    "software"
    "securityHardwares"
    "securitySoftwareInstallationMethod"
    "securitySoftwareName"
    "securityUpdate"
    "securityScan"
    "collapse"
    "collapseOsUpdateSecured"
    "collapseAppUpdateSecured"
  ]

  // TODO: 本来はdelareをつけるべきだが、Civetがうまく動かない
  // https://stimulus.hotwired.dev/reference/using-typescript
  // 初期化なしだが自動設定されるため、readonlyが正しい
  readonly existenceTargets: HTMLInputElement[] // radio list
  readonly contentTargets: HTMLInputElement[] // radio list
  readonly osUpdateTargets: HTMLInputElement[] // radio list
  readonly appUpdateTargets: HTMLInputElement[] // radio list
  readonly softwareTargets: HTMLInputElement[] // radio list
  readonly securityHardwaresTargets: HTMLInputElement[] // checkbox list
  readonly securityUpdateTargets: HTMLInputElement[] // radio list
  readnoly securityScanTargets: HTMLInputElement[] // radio list

  readonly securitySoftwareInstallationMethodTarget: HTMLSelectElement
  readonly securitySoftwareNameTarget: HTMLInputElement // text

  readonly collapseTarget: HTMLDivElement
  readonly collapseOsUpdateSecuredTarget: HTMLDivElement
  readonly collapseAppUpdateSecuredTarget: HTMLDivElement

  readonly hasCollapseOsUpdateSecuredTarget: boolean
  readonly hasCollapseAppUpdateSecuredTarget: boolean

  collapse?: Collapse
  collapseOsUpdateSecured?: Collapse
  collapseAppUpdateSecured?: Collapse

  connect(): void
    @collapse = new Collapse(@collapseTarget, toggle: false)
    if @hasCollapseOsUpdateSecuredTarget
      @collapseOsUpdateSecured = new Collapse(@collapseOsUpdateSecuredTarget,
        toggle: false)
    if @hasCollapseAppUpdateSecuredTarget
      @collapseAppUpdateSecured = new Collapse(@collapseAppUpdateSecuredTarget,
        toggle: false)

    if @existenceTargets.find((e) -> e.value is "existing")?.checked
      @collapse?.show()
      @setRequiredAll(true)
    else
      @collapse?.hide()
      @setRequiredAll(false)

    if @osUpdateTargets.find((e) -> e.value is "secured")?.checked
      @collapseOsUpdateSecured?.show()

    if @appUpdateTargets.find((e) -> e.value is "secured")?.checked
      @collapseAppUpdateSecured?.show()

  setRequiredAll(required: boolean): void
    e.required = required for each e of [
      ...@contentTargets
      ...@osUpdateTargets
      ...@appUpdateTargets
      ...@softwareTargets
      ...@securityUpdateTargets
      ...@securityScanTargets
    ]
    if @hasSecuritySoftwareInstallationMethodTarget
      @securitySoftwareInstallationMethodTarget.required = required
    if @hasSecuritySoftwareNameTarget
      @securitySoftwareNameTarget.required = required
    @checkSecurityHardwares(required)
    @checkSecuritySoftwareInstallationMethod()

  changeExistence(event: Event): void
    target := event.target
    unless target <? HTMLInputElement
      console.warn `target is not HTMLInptuElement: ${target}`
      return

    if target.value is "existing"
      @collapse?.show()
      @setRequiredAll(true)
    else
      @collapse?.hide()
      @setRequiredAll(false)

  changeOsUpdate(event: Event): void
    target := event.target
    unless target <? HTMLInputElement
      console.warn `target is not HTMLInptuElement: ${target}`
      return

    if target.value is "secured"
      @collapseOsUpdateSecured?.show()
    else
      @collapseOsUpdateSecured?.hide()

  changeAppUpdate(event: Event): void
    target := event.target
    unless target <? HTMLInputElement
      console.warn `target is not HTMLInptuElement: ${target}`
      return

    if target.value is "secured"
      @collapseAppUpdateSecured?.show()
    else
      @collapseAppUpdateSecured?.hide()

  changeSecurityHardwares(event: Event): void
    target := event.target
    unless target <? HTMLInputElement
      console.warn `target is not HTMLInptuElement: ${target}`
      return

    // "none", "unkonwn" のみ排他
    exclusiveValues := ["none", "unknown"]
    if target.checked
      if target.value is in exclusiveValues
        for each e of @securityHardwaresTargets
          if e.value is not target.value
            e.checked = false
      else
        for each e of @securityHardwaresTargets
          if e.value is in exclusiveValues
            e.checked = false

    @checkSecurityHardwares()

  checkSecurityHardwares(required: boolean = true): void
    checked .= false
    for each e of @securityHardwaresTargets
      if e.checked
        checked = true
        e.required = required
      else if !checked && e.value is "unknown"
        e.required = required
      else
        e.required = false

  checkSecuritySoftwareInstallationMethod(): void
    return unless @hasSecuritySoftwareInstallationMethodTarget

    switch @securitySoftwareInstallationMethodTarget.value
      "", "other"
        for each e of @securityUpdateTargets
          e.disabled = false
        for each e of @securityScanTargets
          e.disabled = false
      "unnecessary", "not_installed"
        for each e of @securityUpdateTargets
          if e.value is "not_implemented"
            e.checked = true
            e.disabled = false
          else
            e.disabled = true
        for each e of @securityScanTargets
          if e.value is "not_implemented"
            e.checked = true
            e.disabled = false
          else
            e.disabled = true
      "unknown"
        for each e of @securityUpdateTargets
          if e.value is "unknown"
            e.checked = true
            e.disabled = false
          else
            e.disabled = true
        for each e of @securityScanTargets
          if e.value is "unknown"
            e.checked = true
            e.disabled = false
          else
            e.disabled = true
      else
        for each e of @securityUpdateTargets
          if e.value is "not_implemented"
            e.checked = false
            e.disabled = true
          else
            e.disabled = false
        for each e of @securityScanTargets
          if e.value is "not_implemented"
            e.checked = false
            e.disabled = true
          else
            e.disabled = false
