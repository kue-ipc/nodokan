import {Controller} from "@hotwired/stimulus"
import {Collapse} from "bootstrap"

// Connects to data-controller="node-confirmation"
export default class NodeConfirmationController < Controller<HTMLFormElement>
  @targets := [
    "existence"
    "content"
    "osUpdate"
    "appUpdate"
    "software"
    "securityHardware"
    "securitySoftwareInstallationMethod"
    "securitySoftwareName"
    "securityUpdate"
    "securityScan"
    "collapse"
  ]

  // declare readonly existencTargets: HTMLInputElement[] // radio
  // ...
  // declare readonly collapseTarget: HTMLDivElement
  
  collapse: Collapse?

  connect(): void
    @collapse = new Collapse(@collapseTarget, toggle: false)

    @collapseTarget.addEventListener "show.bs.collapse", =>
      @setRequiredAll(true)
    @collapseTarget.addEventListener "hide.bs.collapse", =>
      @setRequiredAll(false)

    if @existenceTargets.find((e) -> e.value is "existing").checked
      @collapse?.show()
    else
      @collapse?.hide()

  setRequiredAll(required: boolean): void
    @contentTargets.forEach (e) -> e.required = required
    @osUpdateTargets.forEach (e) -> e.required = required
    @appUpdateTargets.forEach (e) -> e.required = required
    @softwareTargets.forEach (e) -> e.required = required
    @securityHardwareTargets.forEach (e) -> e.required = required
    if @hasSecuritySoftwareInstallationMethodTarget
      @securitySoftwareInstallationMethodTarget.required = required
    if @hasSecuritySoftwareNameTarget
      @securitySoftwareNameTarget.required = required
    @securityUpdateTargets.forEach (e) -> e.required = required
    @securityScanTargets.forEach (e) -> e.required = required

  changeExistence(event: Event): void
    target := event.target
    unless target <? HTMLInputElement
      console.warn `target is not HTMLInptuElement: ${target}`
      return

    if target.value is "existing"
      @collapse?.show()
    else
      @collapse?.hide()



