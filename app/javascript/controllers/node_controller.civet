import {Controller} from "@hotwired/stimulus"
import {Collapse} from "bootstrap"
import {capitalize} from "../utils/string_utils.civet"

// Connects to data-controller="node"
export default class NodeController < Controller<HTMLFormElement>
  @selectTargets = ["nodeType"] as const

  @flagTargets = [
    "specific"
    "public"
    "dns"
  ] as const

  @collapseHelpTargets := [
    "collapseHelpNormal"
    "collapseHelpMobile"
    "collapseHelpVirtual"
    "collapseHelpLogical"
    "collapseHelpSpecific"
    "collapseHelpPublic"
    "collapseHelpDns"
  ] as const

  @flagCollapseHelps := {
    specific: "collapseHelpSpecific"
    public: "collapseHelpPublic"
    dns: "collapseHelpDns"
  } as const


  @collapseSubFormTargets := [
    "collapseSubFormPlace"
    "collapseSubFormHost"
    "collapseSubFormComponents"
    "collapseSubFormHardware"
    "collapseSubFormOperatingSystem"
  ] as const

  @collapseTargets := [
    ...@collapseHelpTargets
    ...@collapseSubFormTargets
  ] as const

  @targets := [
    ...@selectTargets
    ...@flagTargets
    ...@collapseTargets
  ] as const

  declare readonly nodeTypeTarget: HTMLSelectElement

  collapseHelpNormal?: Collapse
  collapseHelpMobile?: Collapse
  collapseHelpVirtual?: Collapse
  collapseHelpLogical?: Collapse
  collapseHelpSpecific?: Collapse
  collapseHelpPublic?: Collapse
  collapseHelpDns?: Collapse
  collapseSubFormPlace?: Collapse
  collapseSubFormHost?: Collapse
  collapseSubFormComponents?: Collapse
  collapseSubFormHardware?: Collapse
  collapseSubFormOperatingSystem?: Collapse

  connect(): void
    for each name of NodeController.collapseTargets
      if @[`has${capitalize(name)}Target`]
        @[name] = new Collapse(@[`${name}Target`], toggle: false)

  changeNodeType(event?: Event): Promise<void>
    @dispatch("changeNodeType", {detail: {nodeType: @nodeTypeTarget.value}})

    await @waitCollapsing()

    switch @nodeTypeTarget.value
      when "normal"
        @collapseHelpNormal?.show()
        @collapseHelpMobile?.hide()
        @collapseHelpVirtual?.hide()
        @collapseHelpLogical?.hide()
        @collapseSubFormPlace?.show()
        @collapseSubFormHost?.hide()
        @collapseSubFormComponents?.hide()
        @collapseSubFormHardware?.show()
        @collapseSubFormOperatingSystem?.show()
      when "mobile"
        @collapseHelpNormal?.hide()
        @collapseHelpMobile?.show()
        @collapseHelpVirtual?.hide()
        @collapseHelpLogical?.hide()
        @collapseSubFormPlace?.hide()
        @collapseSubFormHost?.hide()
        @collapseSubFormComponents?.hide()
        @collapseSubFormHardware?.show()
        @collapseSubFormOperatingSystem?.show()
      when "virtual"
        @collapseHelpNormal?.hide()
        @collapseHelpMobile?.hide()
        @collapseHelpVirtual?.show()
        @collapseHelpLogical?.hide()
        @collapseSubFormPlace?.hide()
        @collapseSubFormHost?.show()
        @collapseSubFormComponents?.hide()
        @collapseSubFormHardware?.show()
        @collapseSubFormOperatingSystem?.show()
      when "logical"
        @collapseHelpNormal?.hide()
        @collapseHelpMobile?.hide()
        @collapseHelpVirtual?.hide()
        @collapseHelpLogical?.show()
        @collapseSubFormPlace?.hide()
        @collapseSubFormHost?.hide()
        @collapseSubFormComponents?.show()
        @collapseSubFormHardware?.hide()
        @collapseSubFormOperatingSystem?.hide()

  waitCollapsing(delay: number = 200): Promise<void>
    new Promise (resolve) =>
      check := =>
        if @chackCollapsing()
          console.info `wating ${delay} ms`
          setTimeout check, delay
        else
          resolve()
      check()

  chackCollapsing(): boolean
      NodeController.collapseTargets.some (name) =>
        if @[`has${capitalize(name)}Target`]
          @[`${name}Target`].classList.contains("collapsing")

  changeFlag(event?: Event): Promise<void>
    return unless event?.target <? HTMLInputElement

    name := event.target.dataset.nodeTarget ?? ""
    if name is not in NodeController.flagTargets
      console.warn `unknown flag name: ${name}`
      return

    await @waitCollapsing()


    if event.target.checked
      @[NodeController.flagCollapseHelps[name]]?.show()
    else
      @[NodeController.flagCollapseHelps[name]]?.hide()

