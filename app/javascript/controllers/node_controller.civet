import {Controller} from "@hotwired/stimulus"
import {Collapse} from "bootstrap"

import MessageStore from "../utils/message_store.civet"

// TODO: 全体で管理するようなものに変えるべきかと
messageStore: MessageStore? .= undefined

getMessageStore := ->
  return messageStore if messageStore?

  messagesNode := document.getElementById("node-messages")
  if messagesNode?
    messages := JSON.parse(messagesNode.textContent || "{}")
    messageStore = new MessageStore(messages)
  messageStore

// Connects to data-controller="node"
export default class NodeController < Controller<HTMLFormElement>
  // @helps := [
  //   "normal"
  //   "mobile"
  //   "virtual"
  //   "logical"
  //   "specific"
  //   "public"
  //   "dns"
  // ]

  @targets := [
    "nodeType"
    "specific"
    "public"
    "dns"
    "collapseHelpNormal"
    "collapseHelpMobile"
    "collapseHelpVirtual"
    "collapseHelpLogical"
    "collapseHelpSpecific"
    "collapseHelpPublic"
    "collapseHelpDns"
    "collapsePlace"
    "collapseHost"
    "collapseComponents"
    "collapseHardware"
    "collapseOperatingSystem"
  ]

  // TODO: 下記のようにすべきだが、Civetがうまく動かない
  // https://stimulus.hotwired.dev/reference/using-typescript

  // declare readonly nodeTypeTarget: HTMLSelectElement
  // ...

  collapseHelpNormal?: Collapse
  collapseHelpMobile?: Collapse
  collapseHelpVirtual?: Collapse
  collapseHelpLogical?: Collapse
  collapseHelpSpecific?: Collapse
  collapseHelpPublic?: Collapse
  collapseHelpDns?: Collapse
  collapsePlace?: Collapse
  collapseHost?: Collapse
  collapseComponents?: Collapse
  collapseHardware?: Collapse
  collapseOperatingSystem?: Collapse

  connect(): void
    @collapseHelpNormal = new Collapse(@collapseHelpNormalTarget, toggle: false)
    @collapseHelpMobile = new Collapse(@collapseHelpMobileTarget, toggle: false)
    @collapseHelpVirtual = new Collapse(@collapseHelpVirtualTarget, toggle: false)
    @collapseHelpLogical = new Collapse(@collapseHelpLogicalTarget, toggle: false)
    @collapseHelpSpecific = new Collapse(@collapseHelpSpecificTarget, toggle: false)
    @collapseHelpPublic = new Collapse(@collapseHelpPublicTarget, toggle: false)
    @collapseHelpDns = new Collapse(@collapseHelpDnsTarget, toggle: false)
    @collapsePlace = new Collapse(@collapsePlaceTarget, toggle: false)
    @collapseHost = new Collapse(@collapseHostTarget, toggle: false)
    @collapseComponents = new Collapse(@collapseComponentsTarget, toggle: false)
    @collapseHardware = new Collapse(@collapseHardwareTarget, toggle: false)
    @collapseOperatingSystem = new Collapse(@collapseOperatingSystemTarget, toggle: false)

  changeNodeType(_event?: Event): void
    switch @nodeTypeTarget.value
      when "normal"
        @collapseHelpNormal?.show()
        @collapseHelpMobile?.hide()
        @collapseHelpVirtual?.hide()
        @collapseHelpLogical?.hide()
        @collapsePlace?.show()
        @collapseHost?.hide()
        @collapseComponents?.hide()
        @collapseHardware?.show()
        @collapseOperatingSystem?.show()
      when "mobile"
        @collapseHelpNormal?.hide()
        @collapseHelpMobile?.show()
        @collapseHelpVirtual?.hide()
        @collapseHelpLogical?.hide()
        @collapsePlace?.hide()
        @collapseHost?.hide()
        @collapseComponents?.hide()
        @collapseHardware?.show()
        @collapseOperatingSystem?.show()
      when "virtual"
        @collapseHelpNormal?.hide()
        @collapseHelpMobile?.hide()
        @collapseHelpVirtual?.show()
        @collapseHelpLogical?.hide()
        @collapsePlace?.hide()
        @collapseHost?.show()
        @collapseComponents?.hide()
        @collapseHardware?.show()
        @collapseOperatingSystem?.show()
      when "logical"
        @collapseHelpNormal?.hide()
        @collapseHelpMobile?.hide()
        @collapseHelpVirtual?.hide()
        @collapseHelpLogical?.show()
        @collapsePlace?.hide()
        @collapseHost?.hide()
        @collapseComponents?.show()
        @collapseHardware?.hide()
        @collapseOperatingSystem?.hide()

  chackCollapsing(): boolean
    [
      "collapseHelpNormal"
      "collapseHelpMobile"
      "collapseHelpVirtual"
      "collapseHelpLogical"
      "collapseHelpSpecific"
      "collapseHelpPublic"
      "collapseHelpDns"
      "collapsePlace"
      "collapseHost"
      "collapseComponents"
      "collapseHardware"
      "collapseOperatingSystem"
    ].any?
    ?.getInstance().classList.contains("collapsing")

