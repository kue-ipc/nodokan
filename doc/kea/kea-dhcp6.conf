// -*- mode: jsonc -*-
// vim: set ft=jsonc
//
// this file not ...
{
  "Dhcp6": {
    "interfaces-config": {
      "interfaces": []
    },
    "control-socket": {
      "socket-type": "unix",
      "socket-name": "/tmp/kea-dhcp6-ctrl.sock"
    },
    "lease-database": {
      "type": "memfile",
      "lfc-interval": 3600
    },
    "hosts-database": {
      "type": "mysql",
      "name": "kea",
      "user": "kea",
      "password": "kea",
      "host": "localhost",
      "port": 3306
    },
    "expired-leases-processing": {
      "reclaim-timer-wait-time": 10,
      "flush-reclaimed-timer-wait-time": 25,
      "hold-reclaimed-time": 3600,
      "max-reclaim-leases": 100,
      "max-reclaim-time": 250,
      "unwarned-reclaim-cycles": 5
    },
    "renew-timer": 1000,
    "rebind-timer": 2000,
    "preferred-lifetime": 3000,
    "valid-lifetime": 4000,
    "option-data": [
      {
        "name": "dns-servers",
        "data": "2001:db8:2::45, 2001:db8:2::100"
      },
      {
        "name": "unicast",
        "data": "2001:db8::1"
      },
      {
        "name": "new-posix-timezone",
        "data": "EST5EDT4\\,M3.2.0/02:00\\,M11.1.0/02:00"
      },
      {
        "name": "preference",
        "data": "0xf0"
      }
    ],
    "subnet6": [
      {
        "subnet": "2001:db8:1::/64",
        "pools": [
          {
            "pool": "2001:db8:1::/80"
          }
        ],
        "pd-pools": [
          {
            "prefix": "2001:db8:8::",
            "prefix-len": 56,
            "delegated-len": 64
          }
        ],
        "option-data": [
          {
            "name": "dns-servers",
            "data": "2001:db8:2::dead:beef, 2001:db8:2::cafe:babe"
          }
        ],
        "reservations": [
          // This is a simple host reservation. The host with DUID matching
          // the specified value will get an address of 2001:db8:1::100.
          {
            "duid": "01:02:03:04:05:0A:0B:0C:0D:0E",
            "ip-addresses": [
              "2001:db8:1::100"
            ]
          },
          // This is similar to the previous one, but this time the
          // reservation is done based on hardware/MAC address. The server
          // will do its best to extract the hardware/MAC address from
          // received packets (see 'mac-sources' directive for
          // details). This particular reservation also specifies two
          // extra options to be available for this client. If there are
          // options with the same code specified in a global, subnet or
          // class scope, the values defined at host level take
          // precedence.
          {
            "hw-address": "00:01:02:03:04:05",
            "ip-addresses": [
              "2001:db8:1::101"
            ],
            "option-data": [
              {
                "name": "dns-servers",
                "data": "3000:1::234"
              },
              {
                "name": "nis-servers",
                "data": "3000:1::234"
              }
            ],
            // This client will be automatically added to certain
            // classes.
            "client-classes": [
              "special_snowflake",
              "office"
            ]
          },
          // This is a bit more advanced reservation. The client with the
          // specified DUID will get a reserved address, a reserved prefix
          // and a hostname.  This reservation is for an address that it
          // not within the dynamic pool.  Finally, this reservation
          // features vendor specific options for CableLabs, which happen
          // to use enterprise-id 4491. Those particular values will be
          // returned only to the client that has a DUID matching this
          // reservation.
          {
            "duid": "01:02:03:04:05:06:07:08:09:0A",
            "ip-addresses": [
              "2001:db8:1:cafe::1"
            ],
            "prefixes": [
              "2001:db8:2:abcd::/64"
            ],
            "hostname": "foo.example.com",
            "option-data": [
              {
                "name": "vendor-opts",
                "data": "4491"
              },
              {
                "name": "tftp-servers",
                "space": "vendor-4491",
                "data": "3000:1::234"
              }
            ]
          },
          // This reservation is using flexible identifier. Instead of
          // relying on specific field, sysadmin can define an expression
          // similar to what is used for client classification,
          // e.g. substring(relay[0].option[17],0,6). Then, based on the
          // value of that expression for incoming packet, the reservation
          // is matched.  Expression can be specified either as hex or
          // plain text using single quotes.
          // Note: flexible identifier requires flex_id hook library to be
          // loaded to work.
          {
            "flex-id": "'somevalue'",
            "ip-addresses": [
              "2001:db8:1:cafe::2"
            ]
          }
        ]
      }
      // More subnets can be defined here.
      //      {
      //          "subnet": "2001:db8:2::/64",
      //          "pools": [ { "pool": "2001:db8:2::/80" } ]
      //      },
      //      {
      //          "subnet": "2001:db8:3::/64",
      //          "pools": [ { "pool": "2001:db8:3::/80" } ]
      //      },
      //      {
      //          "subnet": "2001:db8:4::/64",
      //          "pools": [ { "pool": "2001:db8:4::/80" } ]
      //      }
    ],
    // Client-classes can be defined here. See "client-classes" in Dhcp4 for
    // an example.
    // Hook libraries can be defined here. See "hooks-libraries" example in
    // Dhcp4.
    // DDNS information (how the DHCPv6 component can reach a DDNS daemon)
    // Logging configuration starts here. Kea uses different loggers to log various
    // activities. For details (e.g. names of loggers), see Chapter 18.
    "loggers": [
      {
        // This specifies the logging for kea-dhcp6 logger, i.e. all logs
        // generated by Kea DHCPv6 server.
        "name": "kea-dhcp6",
        "output_options": [
          {
            // Specifies the output file. There are several special values
            // supported:
            // - stdout (prints on standard output)
            // - stderr (prints on standard error)
            // - syslog (logs to syslog)
            // - syslog:name (logs to syslog using specified name)
            // Any other value is considered a name of a time
            "output": "/var/log/kea/kea-dhcp6.log"
            // Shorter log pattern suitable for use with systemd,
            // avoids redundant information
            // "pattern": "%-5p %m\n"
            // This governs whether the log output is flushed to disk after
            // every write.
            // "flush": false,
            // This specifies the maximum size of the file before it is
            // rotated.
            // "maxsize": 1048576,
            // This specifies the maximum number of rotated files to keep.
            // "maxver": 8
          }
        ],
        // This specifies the severity of log messages to keep. Supported values
        // are: FATAL, ERROR, WARN, INFO, DEBUG
        "severity": "INFO",
        // If DEBUG level is specified, this value is used. 0 is least verbose,
        // 99 is most verbose. Be cautious, Kea can generate lots and lots
        // of logs if told to do so.
        "debuglevel": 0
      }
    ]
  }
}
